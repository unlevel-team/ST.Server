{"version":3,"sources":["stNetwork/DC_SocketIO.js"],"names":[],"mappings":"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","file":"stNetwork/DC_SocketIO.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * DC_SocketIO library\r\n * \r\n * Provides data channel to ST network based on socket.io\r\n * \r\n * \r\n */\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\nlet DataChannel = require('./DataChannel.js').DataChannel;\r\n\r\n\r\n/**\r\n * Data Channel for Socket.io type\r\n */\r\nclass DC_SocketIO extends DataChannel {\r\n\t\r\n\tconstructor(config) {\r\n\t\tsuper(config);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize data channel\r\n\t */\r\n\tinitDataChannel() {\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tsuper.initDataChannel();\r\n\t\t\r\n\t\tswitch ( dc.config.mode ) {\r\n\t\tcase dc.CONSTANTS.Config.modeIN:\r\n\t\t\tdc.initDC_modeIN();\r\n\t\t\tbreak;\r\n\t\tcase dc.CONSTANTS.Config.modeOUT:\r\n\t\t\tdc.initDC_modeOUT();\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize mode IN\r\n\t */\r\n\tinitDC_modeIN() {\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tif (dc.server != null) {\r\n\t\t\t throw \"Server is initialized\";\r\n\t\t}\r\n\t\t\r\n\t\t// Map event: Channel stop\r\n\t\tdc.eventEmitter.on( dc.CONSTANTS.Events.ChannelStop, function() {\n\t\t\tdc.server.close();\r\n\t\t\tdc.state = dc.CONSTANTS.States.DCstate_Stop;\r\n\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelStopped );\r\n\t\t});\r\n\r\n\t\t// Map event: Channel start\r\n\t\tdc.eventEmitter.on( dc.CONSTANTS.Events.ChannelStart, function() {\r\n\t\t\tdc.server.listen( dc.config.socketPort );\t// listen on Socket port\r\n\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelStarted );\r\n\t\t});\r\n\r\n\t\tdc.server = require('socket.io')();\r\n\t\t\r\n\t\t// Map connection of Socket\r\n\t\tdc.server.on('connection', function(socket){\t\r\n\t\t\t\r\n\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ClientConnected , {\"socket\" : socket} );\t// Emit event ClientConnected\r\n\t\t\t  \r\n\t\t\t// Map disconnection of Socket\r\n\t\t\tsocket.on('disconnect', function(){\t\r\n\t\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ClientDisconnected , {\"socket\" : socket} );\t// Emit event ClientDisconnected\r\n\r\n\t\t\t});\r\n\t\t\t  \r\n\t\t\t// Map message of Socket\r\n\t\t\tsocket.on( dc.CONSTANTS.Messages.DataMessage , function(msg){\t\r\n\t\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.MessageReceived , msg );\t// Emit event MessageReceived\r\n\r\n\t\t\t});\r\n\t\t\t  \r\n\t\t});\r\n\r\n\t\t\r\n\t\tdc.eventEmitter.on( dc.CONSTANTS.Events.MainLoop_Tick, function() {\t// Map event MainLoop_Tick\r\n\t\t\tdc.socket.emit(dc.CONSTANTS.Messages.DataMessage , dc.messagesList);\t// Emit messages to socket\r\n\t\t\tdc.messagesList = [];\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\r\n\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelInitialized );\t// Emit event Channel initialized\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize mode OUT\r\n\t */\r\n\tinitDC_modeOUT() {\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tif (dc.socket != null) {\r\n\t\t\t throw \"Socket is initialized\";\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tdc._serverURL = 'http://' + dc.config.netLocation + ':' + dc.config.socketPort;\r\n\r\n\t\t\r\n\t\t// Map event: Channel stop\r\n\t\tdc.eventEmitter.on( dc.CONSTANTS.Events.ChannelStop, function() {\r\n\t\t\tdc.socket.close();\r\n\t\t\tdc.state = dc.CONSTANTS.States.DCstate_Stop;\r\n\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelStopped );\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map event ChannelStart\r\n\t\tdc.eventEmitter.on( dc.CONSTANTS.Events.ChannelStart, function() {\r\n\r\n\t\t\tdc.socket = require('socket.io-client')(dc._serverURL);\t// connect to server\r\n\t\t\t\r\n\t\t\t// Map event connect\r\n\t\t\tdc.socket.on('connect', function(){\t\r\n\t\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelStarted );\t// Emit event ChannelStarted\r\n\t\t\t\t  \r\n\t\t\t});\r\n\r\n\t\t\t// Map event disconnect\r\n\t\t\tdc.socket.on('disconnect', function(){\t\r\n\t\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelStop );\t// Emit event ChannelStop\r\n\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// Map message of Socket\r\n\t\t\tdc.socket.on( dc.CONSTANTS.Messages.DataMessage , function(msg){\t\r\n\t\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.MessageReceived , msg );\t// Emit event MessageReceived\r\n\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map event MainLoop_Tick\r\n\t\tdc.eventEmitter.on( dc.CONSTANTS.Events.MainLoop_Tick, function() {\t\r\n\t\t\tdc.socket.emit(dc.CONSTANTS.Messages.DataMessage , dc.messagesList);\t// Emit messages to socket\r\n\t\t\tdc.messagesList = [];\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tdc.state = dc.CONSTANTS.States.DCstate_Ready;\t// Change state to Ready\r\n\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelInitialized );\t// Emit event: Channel initialized\r\n\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\nmodule.exports = DC_SocketIO;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}