{"version":3,"sources":["stNetwork/DataChannel.js"],"names":[],"mappings":"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","file":"stNetwork/DataChannel.js","sourcesContent":["\"use strict\";\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\nlet net = require('net');\r\n\r\n\r\n\r\n\r\n/**\r\n * DataChannel CONSTANTS\r\n */\r\nconst DataChannel_CONSTANTS = {\r\n\t\t\"Config\" : {\r\n\t\t\t\"DCtype_socketio\" : \"socketio\",\r\n\t\t\t\"DCtype_udp\" : \"udp\",\r\n\t\t\t\r\n\t\t\t\"MSGType_Normal\" : \"normal\",\r\n\t\t\t\"DataType_JSON\" : \"json\",\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\"modeIN\" : \"input\",\r\n\t\t\t\"modeOUT\" : \"output\"\r\n\r\n\t\t},\r\n\t\t\r\n\t\t\"States\" : {\r\n\t\t\t\"DCstate_Config\" : \"config\",\r\n\t\t\t\"DCstate_Ready\" : \"ready\",\r\n\t\t\t\"DCstate_Working\" : \"working\",\r\n\t\t\t\"DCstate_Stop\" : \"stop\"\r\n\t\t},\r\n\t\t\r\n\t\t\"Events\" : {\r\n\t\t\t\"ChannelInitialized\" : \"Channel initialized\",\r\n\t\t\t\"ChannelStart\" : \"Channel start\",\r\n\t\t\t\"ChannelStarted\" : \"Channel started\",\r\n\t\t\t\"ChannelStop\" : \"Channel stop\",\r\n\t\t\t\"ChannelStopped\" : \"Channel stopped\",\r\n\t\t\t\"ClientConnected\" : \"Client Connected\",\r\n\t\t\t\"ClientDisconnected\" : \"Client Disconnected\",\r\n\t\t\t\r\n\t\t\t\"MainLoop_Tick\" : \"Main Loop\",\r\n\t\t\t\"MainLoop_Stop\" : \"Main Loop Stop\",\r\n\t\t\t\r\n\t\t\t\"MessageReceived\" : \"DataMSG\",\r\n\t\t\t\r\n\t\t\t\"DataChannelAdded\" : \"DCH Added\",\r\n\t\t\t\"DataChannelRemoved\" : \"DCH Removed\",\r\n\r\n\r\n\t\t},\r\n\t\t\r\n\t\t\"Messages\" : {\r\n\t\t\t\"DataMessage\": \"DataMSG\"\r\n\t\t}\r\n\t};\r\n\r\n\r\n/**\r\n * Data message\r\n */\r\nclass DataMessage {\r\n\t\r\n\tconstructor(msg) {\r\n\t\tthis.type = DataChannel_CONSTANTS.Config.MSGType_Normal;\r\n\t\tthis.typeExtra = null;\r\n\t\tthis.dataType = DataChannel_CONSTANTS.Config.DataType_JSON;\r\n\t\tthis.msg = msg;\r\n\t\t\r\n\t\tthis.CONSTANTS = DataChannel_CONSTANTS;\r\n\t}\r\n\t\r\n}\r\n\r\n/**\r\n * Data channel\r\n */\r\nclass DataChannel {\r\n\t\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tthis.messagesList = [];\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = DataChannel_CONSTANTS;\r\n\t\t\r\n\t\tthis.server = null;\r\n\t\tthis.socket = null;\r\n\r\n\t\tthis._mainLoop = null;\r\n\t\t\r\n\t\tthis.config = config;\r\n\t\t\r\n\t\tthis.state = DataChannel_CONSTANTS.States.DCstate_Config;\r\n\t\t\r\n\t\t\r\n\t\tlet dataChannel = this;\r\n\t\t\r\n\t\tthis.eventEmitter.on( this.CONSTANTS.Events.MainLoop_Stop, function() {\r\n\t\t\tclearInterval( dataChannel._mainLoop );\r\n\t\t\tdataChannel.state = dataChannel.CONSTANTS.States.DCstate_Ready;\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize data channel\r\n\t */\r\n\tinitDataChannel() {\r\n\t\tif (this.state != this.CONSTANTS.States.DCstate_Config) {\r\n\t\t\tthrow \"Bad channel state\";\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start data channel\r\n\t */\r\n\tstartDataChannel() {\r\n\t\tif ( this.state != this.CONSTANTS.States.DCstate_Config || \r\n\t\t\t\tthis.state != this.CONSTANTS.States.DCstate_Stop ) {\r\n\t\t\tthrow \"Bad channel state\";\r\n\t\t}\r\n\t\t\r\n\t\tthis.eventEmitter.emit(this.CONSTANTS.Events.ChannelStart);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop data channel\r\n\t */\r\n\tstopDataChannel() {\r\n\t\tif (this.state != this.CONSTANTS.States.DCstate_Ready) {\r\n\t\t\tthrow \"Bad channel state\";\r\n\t\t}\r\n\t\t\r\n\t\tthis.eventEmitter.emit(this.CONSTANTS.Events.ChannelStop);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Send message\r\n\t */\r\n\tsendMessage(msg) {\r\n\t\tvar dataMSG = new DataMessage(msg);\r\n\t\tthis.messagesList.push(dataMSG);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Main loop\r\n\t */\r\n\tmainLoop() {\r\n\t  let dataChannel = this;\r\n\t  \r\n\t  if ( dataChannel.state == dataChannel.CONSTANTS.States.DCstate_Ready ) {\r\n\t\t  throw \"Bad channel state\";\r\n\t  }\r\n\t  \r\n\t  dataChannel.state == dataChannel.CONSTANTS.States.DCstate_Working;\r\n\t  \r\n\t  dataChannel._mainLoop = setInterval(() => {\r\n\t\t  if (dataChannel.state == dataChannel.CONSTANTS.States.DCstate_Working) {\r\n\t\t\t  dataChannel.eventEmitter.emit(dataChannel.CONSTANTS.Events.MainLoop_Tick);\r\n\t\t  } else {\r\n\t\t\t  dataChannel.eventEmitter.emit(dataChannel.CONSTANTS.Events.MainLoop_Stop);\r\n\t\t  }\r\n\t  }, dataChannel.config.loopTime);\r\n\t  \r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop main loop\r\n\t */\r\n\tstopMainLoop() {\r\n\t\tthis.eventEmitter.emit(this.CONSTANTS.Events.MainLoop_Stop);\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * Data channels manager\r\n */\r\nclass DataChannelsManager {\r\n\t\r\n\tconstructor() {\r\n\t\tthis.channelsList = [];\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = DataChannel_CONSTANTS;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get Data channel\r\n\t */\r\n\tstatic get_DataChannel(config) {\r\n\t\t\r\n\t\tvar dataChannel = null;\r\n\t\t\r\n\t\tswitch (config.type) {\r\n\t\tcase DataChannel_CONSTANTS.Config.DCtype_socketio:\r\n\t\t\tlet DC_SocketIO = require('./DC_SocketIO.js');\r\n\t\t\tdataChannel = new DC_SocketIO(config);\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\treturn dataChannel;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns Messages searched by Message.typeExtra\r\n\t */\r\n\tstatic getMessagesByTypeExtra(typeExtra, msgList) {\r\n\t\t\r\n\t\tvar messages = msgList.filter(function(msg, _i, _items) {\r\n\t\t\t\r\n\t\t\tif (msg.typeExtra == typeExtra) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"numMessages\": messages.length,\r\n\t\t\t\"messages\": messages\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add data channel\r\n\t */\r\n\taddDataChannel(dch) {\r\n\t\t\r\n\t\tif (dch.config.id == undefined || \r\n\t\t\t\tdch.config.id == null) {\r\n\t\t\tthrow \"Channel needs ID.\";\r\n\t\t}\r\n\t\t\r\n\t\tlet dchSearch = this.getDataChannelByID(dch.config.id);\r\n\t\tif (dchSearch.dataChannel != null){\r\n\t\t\tthrow \"Duplicated channel ID.\";\r\n\t\t}\r\n\t\t\r\n\t\tthis.channelsList.push(dch);\r\n\t\t\r\n\t\tthis.eventEmitter.emit( this.CONSTANTS.Events.DataChannelAdded, dch.config.id);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Remove data channel\r\n\t */\r\n\tremoveDataChannel(dchID) {\r\n\t\t\r\n\t\tlet dchnm = this;\r\n\t\t\r\n\t\tlet dchSearch = dchnm.getDataChannelByID(dchID);\r\n\t\tif (dchSearch.dataChannel == null){\r\n\t\t\tthrow \"Channel not found.\";\r\n\t\t}\r\n\t\t\r\n\t\tlet dataChannel = dchSearch.dataChannel;\r\n\t\t\r\n\t\tif (dataChannel.state == dchnm.CONSTANTS.States.DCstate_Working) {\r\n\t\t\tthrow \"Bad channel state.\";\r\n\t\t}\r\n\t\t\r\n\t\tdchnm.channelsList.splice(dchSearch.position, 1);\r\n\t\t\r\n\t\tdchnm.eventEmitter.emit( dchnm.CONSTANTS.Events.DataChannelRemoved, dchID);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns data channel searched by id\r\n\t */\r\n\tgetDataChannelByID(dchID) {\r\n\t\tlet dch = null;\r\n\t\t\r\n\t\tvar _i = 0;\r\n\t\tfor (_i = 0; _i < this.channelsList.length; _i++) {\r\n\t\t\t\r\n\t\t\tif (this.channelsList[_i].config.id == dchID) {\r\n\t\t\t\tdch = this.channelsList[_i];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"dataChannel\": dch,\r\n\t\t\t\"position\": _i\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nvar dataChannel_Lib = {\r\n\t\"CONSTANTS\" : DataChannel_CONSTANTS,\r\n\t\"DataChannel\" : DataChannel,\r\n\t\"DataMessage\" : DataMessage,\r\n\t\"DataChannelsManager\": DataChannelsManager\r\n};\r\n\r\nmodule.exports = dataChannel_Lib;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}