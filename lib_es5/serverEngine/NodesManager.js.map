{"version":3,"sources":["serverEngine/NodesManager.js"],"names":[],"mappings":"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","file":"serverEngine/NodesManager.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Nodes Manager\r\n \r\n - Provides nodes management\r\n - Manage event [NodeAdded]\r\n - Manage message [getNodeInfo]->[NodeInfo] and set configuration of node\r\n - Manage event [NodeDisconnected]\r\n - Shutdown node\r\n \r\n */\r\n\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n/**\r\n * NodesManager_CONSTANTS\r\n */\r\nconst NodesManager_CONSTANTS = {\r\n\t\t\r\n\t\t\"States\" : {\r\n\t\t\t\"Setup\" : \"Setup\",\r\n\t\t\t\"Ready\" : \"Ready\"\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\t\"Events\" : {\r\n\t\t\t\"NodeDisconnected\": \"Node Disconnected\",\r\n\t\t\t\"NodeRemoved\": \"Node Removed\",\r\n\t\t\t\"NodeAdded\": \"Node Added\"\r\n\r\n\r\n\t\t},\r\n\t\t\r\n\t\t\"Messages\" : {\r\n\t\t\t\"getNodeInfo\" : \"Get Node Info\",\r\n\t\t\t\"NodeInfo\" : \"Node Info\",\r\n\t\t\t\"BadNodeConfig\" : \"Bad Node Config\",\r\n\t\t\t\r\n\t\t\t\"ShutDownNode\" : \"ShutDownNode\"\r\n\r\n\t\t}\r\n};\r\n\r\n\r\n/**\r\n * ST Node\r\n */\r\nclass Node {\r\n\t\r\n\t\r\n\tconstructor(config, socket) {\r\n\t\t\r\n\t\tthis.state = null;\r\n\t\t\r\n\t\tthis.config = config;\r\n\t\tthis.socket = socket;\r\n\t\t\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\r\n\t\tthis.CONSTANTS = NodesManager_CONSTANTS;\r\n\t\t\r\n\t\tthis.mapSocketEvents();\r\n\t\tthis.mapSocketMessages();\r\n\r\n\t\tif (this.config == null) {\r\n\t\t\tthis.state = this.CONSTANTS.States.Setup;\r\n\t\t\tthis.socket.emit( this.CONSTANTS.Messages.getNodeInfo );\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Map socket events\r\n\t */\r\n\tmapSocketEvents() {\r\n\t\t\r\n\t\tlet node = this;\r\n\t\t\r\n\t\tnode.socket.on('disconnect', function(){\r\n\t\t\tnode.eventEmitter.emit( node.CONSTANTS.Events.NodeDisconnected , {\"node\" : node} );\r\n\t\t  });\r\n\t\t\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Map socket messages\r\n\t */\r\n\tmapSocketMessages() {\r\n\t\t\r\n\t\tlet node = this;\r\n\t\t\r\n\t\tnode.socket.on(node.CONSTANTS.Messages.NodeInfo, function(msg){\r\n\t\t\t\r\n\t\t\t  console.log('<*> ST Node.Messages.NodeInfo');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t  console.log(msg);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\t  node.config = msg;\r\n\t\t\t  \r\n\t\t\tnode.eventEmitter.emit( node.CONSTANTS.Events.NodeAdded , {\"node\" : node} );\r\n\r\n\t\t  });\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * ST Nodes Manager\r\n */\r\nclass NodesManager {\r\n\t\r\n\tconstructor() {\r\n\t\tthis.nodeList = [];\r\n\t\t\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\r\n\t\t\r\n\t\tthis.CONSTANTS = NodesManager_CONSTANTS;\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add ST Node\r\n\t */\r\n\taddNode(config, socket) {\r\n\t\t\r\n\t\tlet stNode = new Node(config, socket);\r\n\t\tlet ndm = this;\r\n\t\t\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |\\/|···  \r\n\t  // Event NodeAdded\r\n\t\tstNode.eventEmitter.on( stNode.CONSTANTS.Events.NodeAdded, function(data){\r\n\t\t\t\r\n\t\t\tlet nodeSearch = ndm.getNodeByID( data.node.config.nodeID );\r\n\t\t\tif (nodeSearch.stNode != null ) {\r\n\t\t\t\t\r\n\t\t\t\tstNode.socket.emit(ndm.CONSTANTS.Messages.BadNodeConfig, {\r\n\t\t\t\t\t\"message\" : \"nodeID duplicated.\"\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tdata.node.state = ndm.CONSTANTS.States.Ready;\r\n\t\t\t\tndm.eventEmitter.emit( ndm.CONSTANTS.Events.NodeAdded, data );\t// Emit event NodeAdded\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t});\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |/\\|···  \r\n\t\t\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |\\/|···  \r\n\t  // Event NodeDisconnected\t\t\r\n\t\tstNode.eventEmitter.on( stNode.CONSTANTS.Events.NodeDisconnected, function(data){\r\n\t\t\t\r\n\t\t\tlet nodeSearh = ndm.getNodeBySocket(data.node.socket);\r\n\t\t\t\r\n\t\t\tif (nodeSearh.stNode != null) {\r\n\t\t\t\tndm.nodeList.splice(nodeSearh.position, 1);\r\n\t\t\t\tndm.eventEmitter.emit( ndm.CONSTANTS.Events.NodeRemoved );\t// Emit event NodeRemoved\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |/\\|···  \r\n\r\n\t\t\r\n\t\tndm.nodeList.push(stNode);\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns Node searched by ID\r\n\t */\r\n\tgetNodeByID(nodeID, state) {\r\n\t\t\r\n\t\tlet ndm = this;\r\n\t\tlet nodesList = ndm.nodeList;\r\n\t\t\r\n\t\tlet node = null;\r\n\t\tlet _i = 0;\r\n\t\t\r\n\t\tif (state == undefined) {\r\n\t\t\tstate = NodesManager_CONSTANTS.States.Ready;\r\n\t\t}\r\n\t\t\r\n\t\tfor (_i = 0; _i < nodesList.length; _i++) {\r\n\t\t\tif (nodesList[_i].config.nodeID == nodeID && \r\n\t\t\t\t\tnodesList[_i].state == state) {\r\n\t\t\t\tnode = nodesList[_i];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"stNode\": node,\r\n\t\t\t\"position\": _i\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns Node searched by Socket\r\n\t */\r\n\tgetNodeBySocket(socket) {\r\n\r\n\t\tlet ndm = this;\r\n\t\tlet nodesList = ndm.nodeList;\r\n\t\t\r\n\t\tlet node = null;\r\n\t\tlet _i = 0;\r\n\t\t\r\n\t\tfor (_i = 0; _i < nodesList.length; _i++) {\r\n\t\t\tif (nodesList[_i].socket.id == socket.id) {\r\n\t\t\t\tnode = nodesList[_i];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"stNode\": node,\r\n\t\t\t\"position\": _i\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * ShutDown Node\r\n\t */\r\n\tshutDownNode(nodeID) {\r\n\t\tlet ndm = this;\r\n\t\t\r\n\t\tlet nodeSearch = ndm.getNodeByID(nodeID);\r\n\t\tif (nodeSearch.stNode != null ){\r\n\t\t\tnodeSearch.stNode.socket.emit( ndm.CONSTANTS.Messages.ShutDownNode );\t// Emit event ShutDownNode\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\nmodule.exports = NodesManager;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}