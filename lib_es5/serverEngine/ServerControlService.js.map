{"version":3,"sources":["serverEngine/ServerControlService.js"],"names":[],"mappings":"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","file":"serverEngine/ServerControlService.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Server control service\r\n \r\n - Provides server control service\r\n - Map routes to sensors control\r\n - Map routes to actuators control\r\n - Map routes to nodes control\r\n - Map routes to nodes net control\r\n \r\n */\r\n\r\n\r\n/**\r\n * import EventEmitter\r\n * @ignore\r\n */\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n/**\r\n * import portscanner\r\n * @ignore\r\n */\r\nlet portscanner = require('portscanner');\r\n\r\n/**\r\n * import express\r\n * @ignore\r\n */\r\nlet express = require('express');\r\n\r\n\r\n\r\n/**\r\n * ServerControlService CONSTANTS\r\n * @memberof st.serverEngine\r\n */\r\nconst ServerControlService_CONSTANTS = {\r\n\t\"Events\" : {\r\n\t\t\"ConfigError\": \"Config Error\",\r\n\r\n\t\t\"ServerListening\": \"Server listening\",\r\n\t\t\"ServerClosed\": \"Server closed\"\r\n\r\n\t},\r\n\t\r\n\t\"States\" : {\r\n\t\t\"Config\" : \"Config\",\r\n\t\t\"Running\" : \"Running\",\r\n\t\t\"Error\" : \"Error\"\r\n\t},\r\n\t\r\n\t\"Messages\" : {\r\n\t\t\"getSTNetworkInfo\" : \"Get STNetwork Info\",\r\n\t\t\"STNetworkInfo\" : \"STNetwork Info\"\r\n\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * SCS_RouteRef\r\n * <pre>\r\n * Provides reference to SCS routes\r\n * </pre>\r\n * \r\n * @class\r\n * @memberof st.serverEngine\r\n * \r\n * @property {object} expressRoute - Express route object\r\n * @property {string} url - URL for the route\r\n * \r\n */\r\nclass SCS_RouteRef {\r\n\t\r\n\t/**\r\n\t * \r\n\t * @constructs SCS_RouteRef\r\n\t * \r\n\t * @param {object} expressRoute - Express route object\r\n\t * @param {string} url - URL for the route\r\n\t * \r\n\t */\r\n\tconstructor(expressRoute, url) {\r\n\t\t\r\n\t\tlet scs_Route = this;\r\n\t\t\r\n\t\tscs_Route.expressRoute = expressRoute;\r\n\t\tscs_Route.url = url;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * ServerControlService\r\n * <pre>\r\n * Is the service for send and receive data control for Server administration\r\n * </pre>\r\n * \r\n * @class\r\n * @memberof st.serverEngine\r\n * \r\n * @property {st.serverEngine.STServer} stServer - ST Server object\r\n * @property {object} config - ST Server configuration object\r\n * @property {object} server - Server \r\n * @property {object} serverSocket - Server socket\r\n * @property {object} eventEmitter - Object for emit events\r\n * \r\n * @property {string} state - State\r\n * \r\n * @property {object} _scsRoutes - Express routes object\r\n * @property {object} routes_Nodes - Routes for Nodes\r\n * @property {object} routes_Engines - Routes for Engines\r\n * @property {object} routes_Net - Routes for Net\r\n * \r\n * @property {number} messages - Number of messages\r\n * \r\n */\r\nclass ServerControlService {\r\n\t\r\n\t/**\r\n\t * \r\n\t * @constructs ServerControlService\r\n\t * \r\n\t * @param {STServer} stServer - ST Server object\r\n\t */\r\n\tconstructor(stServer) {\r\n\t\t\r\n\t\tlet _scs = this;\r\n\t\t\r\n\t\t_scs.stServer = stServer;\r\n\t\t_scs.config = stServer.serverConfiguration.config;\r\n\t\t_scs.server = null;\r\n\t\t_scs.serverSocket = null;\r\n\t\t_scs.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\t_scs.CONSTANTS = ServerControlService_CONSTANTS;\r\n\t\t\r\n\t\t_scs.state = ServerControlService_CONSTANTS.States.Config;\r\n\t\t\r\n\t\t\r\n\t\t_scs.__scsRoutes = null;\r\n\t\t\r\n\t\t_scs.routes_Nodes = null;\r\n\t\t_scs.routes_Engines = null;\r\n//\t\t_scs.routes_Sensors = null;\r\n//\t\t_scs.routes_Actuators = null;\r\n\t\t_scs.routes_Net = null;\r\n\t\t\r\n\t\t_scs.messages = 0;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tlet _scs = this;\r\n\t\t\r\n\t\t_scs._scsRoutes = [];\r\n\t\t\r\n\t\ttry {\r\n\t\t\t_scs._init_Nodes();\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tthrow \"Cannont initialize Nodes. \" + e;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\t_scs._init_Engines();\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tthrow \"Cannont initialize Engines. \" + e;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\t_scs._init_Net();\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tthrow \"Cannont initialize Net. \" + e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize control routes \r\n\t * for nodes\r\n\t */\r\n\t_init_Nodes() {\r\n\t\t\r\n\t\tlet _scs = this;\r\n\t\t\r\n\t\tlet SCS_RouteNodes = require('./scs_routes/SCS_RouteNodes.js');\r\n\t\t\r\n\t\tconsole.log('<~*~> ServerControlService._init_Nodes');\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t_scs.routes_Nodes = new SCS_RouteNodes( _scs.stServer.nodesManager );\r\n\t\tlet _scsRoutes_Nodes = new SCS_RouteRef(_scs.routes_Nodes.expressRoute, \"/Nodes\");\r\n\t\t_scs._scsRoutes.push(_scsRoutes_Nodes);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize control routes \r\n\t * <pre>\r\n\t * for Engines\r\n\t * </pre>\r\n\t */\r\n\t_init_Engines() {\r\n\t\t\r\n\t\tlet scs = this;\r\n\t\tlet stServer = scs.stServer;\r\n\t\tlet ngSYS = stServer.ngSYS;\r\n\t\t\r\n\t\tconsole.log('<~*~> ServerControlService._init_Engines');\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tscs.routes_Engines = ngSYS.getSCSRoutes(\r\n\t\t\t\t{\r\n\t\t\t\t\t\"ngSYS\" : ngSYS\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tthrow \"Cannot get SCS Routes. \" + e;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tlet scsRoutes_Engines = new SCS_RouteRef(scs.routes_Engines.expressRoute, \"/ngn\");\r\n\t\tscs._scsRoutes.push(scsRoutes_Engines);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize control routes \r\n\t * <pre>\r\n\t * for Net\r\n\t * </pre>\r\n\t */\r\n\t_init_Net() {\r\n\t\t\r\n\t\tlet _scs = this;\r\n\t\tlet _stServer = _scs.stServer;\r\n\t\tlet _comSYS = _stServer.comSYS;\r\n\t\t\r\n\t\tconsole.log('<~*~> ServerControlService._init_Net');\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\ttry {\r\n\t\t\t_scs._routes_Net = _comSYS.getSCSRoutes({\r\n\t\t\t\t'comSYS': _comSYS,\r\n\t\t\t\t'nodesManager': _stServer.nodesManager,\r\n\t\t\t\t'nodesNetManager': _stServer.nodesNetManager,\r\n\t\t\t\t'serverNetManager': _stServer.serverNetManager\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tthrow \"Cannot get SCS Routes. \" + e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlet _scsRoutes_Net = new SCS_RouteRef(_scs._routes_Net.expressRoute, \"/Net\");\r\n\t\t_scs._scsRoutes.push( _scsRoutes_Net );\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start service\r\n\t * \r\n\t * @throws Exceptions\r\n\t */\r\n\tstartService() {\r\n\t\t\r\n\t\tlet scs = this;\r\n\t\t\r\n\t\tif (scs.server !== null) {\r\n\t\t\t throw \"Server is running\";\r\n\t\t}\r\n\t\t\r\n\t\tscs.server = express();\r\n//\t\tscs.server.use(express.bodyParser());\t// Middleware for use JSON on HTTP posts.\r\n\t\tscs.mapServiceRoutes();\r\n\r\n\t\t\r\n\t\tconsole.log('<~*~> ST Server.ServerControlService.startService');\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\r\n\t\t/*\r\n\t\t \r\n\t\tDataChannel.portInUse( scs.config.server.controlPort, function(_portInUse) {\r\n\t\t\tif (_portInUse) {\r\n\t\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ConfigError );\r\n\t\t\t} else {\r\n\t\t\t\tscs.serverSocket = scs.server.listen( scs.config.server.controlPort );\r\n\t\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ServerListening );\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t*/\r\n\t\t\r\n\t\t\r\n\t\t// Checks the status of a single port\r\n\t\tportscanner.checkPortStatus(scs.config.server.controlPort, scs.config.server.netLocation, function(error, status) {\r\n\t\t  // Status is 'open' if currently in use or 'closed' if available\r\n\t\t  \r\n\t\t  switch (status) {\r\n\t\t  \r\n\t\t\tcase 'closed':\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tscs.serverSocket = scs.server.listen( scs.config.server.controlPort, scs.config.server.netLocation );\r\n//\t\t\t\tscs.serverSocket = scs.server.listen( scs.config.server.controlPort );\r\n\t\t\t\t\r\n\t\t\t\tscs.state = scs.CONSTANTS.States.Running;\r\n\t\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ServerListening );\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tdefault:\r\n\t\t\t\tscs.state = scs.CONSTANTS.States.Error;\r\n\t\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ConfigError );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t/*\r\n\t\t \r\n\t\ttry {\r\n\t\t\tscs.serverSocket = scs.server.listen( scs.config.server.controlPort );\r\n\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ServerListening );\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ConfigError );\r\n\r\n\t\t}\r\n\r\n\t\t*/\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map Service routes\r\n\t */\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet scs = this;\r\n\r\n\t\t\r\n\t\t// middleware that is specific to this router\r\n\t\tscs.server.use(function messageCount(req, res, next) {\r\n\t\t\t\r\n\t\t\tscs.messages++;\r\n\r\n\t\t\t// res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n\t\t\t// res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n\t\t  \t\r\n\t\t\tres.setHeader('Access-Control-Allow-Origin', '*');\r\n\t\t\t\r\n\t\t\t\r\n\t\t    // Request methods you wish to allow\r\n\t\t    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n\r\n\t\t    // Request headers you wish to allow\r\n\t\t    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\r\n\r\n\t\t    // Set to true if you need the website to include cookies in the requests sent\r\n\t\t    // to the API (e.g. in case you use sessions)\r\n\t\t    // res.setHeader('Access-Control-Allow-Credentials', true);\r\n\t\t\t\t\r\n\t\t\tnext();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tscs.server.get('/', function(req, res){\r\n\t\t\t  res.send('ST Server Control Service');\r\n\t\t\t});\r\n\t\t\r\n\t\t// Map SCS routes...\r\n\t\tscs._scsRoutes.forEach(function(_route, _i) {\n\t\t\tscs.server.use(_route.url, _route.expressRoute);\n\t\t});\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop service\r\n\t * \r\n\t * @throws Exceptions\r\n\t */\r\n\tstopService() {\r\n\t\t\r\n\t\tlet scs = this;\r\n\t\r\n\t\tif (scs.server === null) {\r\n\t\t\t throw \"Server not running\";\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('<~*~> ST Server.ServerControlService.stopService');\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\r\n\t\tif (scs.state === scs.CONSTANTS.States.Running) {\r\n\t\t\tscs.serverSocket.close();\r\n\t\t}\r\n\t\t\r\n\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ServerClosed );\r\n\t\tscs.server = null;\r\n\t\tscs.serverSocket = null;\r\n\t}\r\n\t\r\n}\r\n\r\nmodule.exports = ServerControlService;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}