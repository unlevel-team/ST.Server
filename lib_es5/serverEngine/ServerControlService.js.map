{"version":3,"sources":["serverEngine/ServerControlService.js"],"names":[],"mappings":"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","file":"serverEngine/ServerControlService.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Server control service\r\n \r\n - Provides server control service\r\n - Map routes to sensors control\r\n - Map routes to actuators control\r\n - Map routes to nodes control\r\n - Map routes to nodes net control\r\n \r\n */\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\nlet portscanner = require('portscanner');\r\nlet express = require('express');\r\n\r\n\r\nlet SCS_RouteSensors = require('./scs_routes/SCS_RouteSensors.js');\r\nlet SCS_RouteActuators = require('./scs_routes/SCS_RouteActuators.js');\r\nlet SCS_RouteNodes = require('./scs_routes/SCS_RouteNodes.js');\r\n\r\nlet SCS_RouteNet = require('st.network').SCS_RouteNet;\r\n\r\n\r\n\r\n/**\r\n * ServerControlService CONSTANTS\r\n */\r\nconst ServerControlService_CONSTANTS = {\r\n\t\"Events\" : {\r\n\t\t\"ConfigError\": \"Config Error\",\r\n\r\n\t\t\"ServerListening\": \"Server listening\",\r\n\t\t\"ServerClosed\": \"Server closed\"\r\n\r\n\t},\r\n\t\r\n\t\"States\" : {\r\n\t\t\"Config\" : \"Config\",\r\n\t\t\"Running\" : \"Running\",\r\n\t\t\"Error\" : \"Error\"\r\n\t},\r\n\t\r\n\t\"Messages\" : {\r\n\t\t\"getSTNetworkInfo\" : \"Get STNetwork Info\",\r\n\t\t\"STNetworkInfo\" : \"STNetwork Info\"\r\n\r\n\t}\r\n};\r\n\r\n\r\n\r\n/*\r\n * ServerControlService\r\n * \r\n * Is the service for send and receive data control for Server administration\r\n * \r\n */\r\nclass ServerControlService {\r\n\t\r\n\tconstructor(stServer) {\r\n\t\t\r\n\t\tthis.stServer = stServer;\r\n\t\tthis.config = stServer.serverConfiguration.config;\r\n\t\tthis.server = null;\r\n\t\tthis.serverSocket = null;\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = ServerControlService_CONSTANTS;\r\n\t\t\r\n\t\tthis.state = ServerControlService_CONSTANTS.States.Config;\r\n\t\t\r\n\t\tthis.routes_Sensors = null;\r\n\t\tthis.routes_Actuators = null;\r\n\t\tthis.routes_Nodes = null;\r\n\t\tthis.routes_Net = null;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start service\r\n\t * \r\n\t * @throws Exceptions\r\n\t */\r\n\tstartService() {\r\n\t\t\r\n\t\tlet scs = this;\r\n\t\t\r\n\t\tif (scs.server !== null) {\r\n\t\t\t throw \"Server is running\";\r\n\t\t}\r\n\t\t\r\n\t\tscs.server = express();\r\n//\t\tscs.server.use(express.bodyParser());\t// Middleware for use JSON on HTTP posts.\r\n\t\tscs.mapServiceRoutes();\r\n\r\n\t\t\r\n//\t\tDataChannel.portInUse( scs.config.server.controlPort, function(_portInUse) {\r\n//\t\t\tif (_portInUse) {\r\n//\t\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ConfigError );\r\n//\t\t\t} else {\r\n//\t\t\t\tscs.serverSocket = scs.server.listen( scs.config.server.controlPort );\r\n//\t\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ServerListening );\r\n//\t\t\t}\r\n//\t\t});\r\n\t\t\t\r\n\t\t\r\n\t\t// Checks the status of a single port\r\n\t\tportscanner.checkPortStatus(scs.config.server.controlPort, scs.config.server.netLocation, function(error, status) {\r\n\t\t  // Status is 'open' if currently in use or 'closed' if available\r\n\t\t  \r\n\t\t  switch (status) {\r\n\t\t\tcase 'closed':\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tscs.serverSocket = scs.server.listen( scs.config.server.controlPort, scs.config.server.netLocation );\r\n//\t\t\t\tscs.serverSocket = scs.server.listen( scs.config.server.controlPort );\r\n\t\t\t\t\r\n\t\t\t\tscs.state = scs.CONSTANTS.States.Running;\r\n\t\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ServerListening );\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tdefault:\r\n\t\t\t\tscs.state = scs.CONSTANTS.States.Error;\r\n\t\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ConfigError );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n//\t\ttry {\r\n//\t\t\tscs.serverSocket = scs.server.listen( scs.config.server.controlPort );\r\n//\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ServerListening );\r\n//\t\t} catch (e) {\r\n//\t\t\t// TODO: handle exception\r\n//\t\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ConfigError );\r\n//\r\n//\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map Service routes\r\n\t */\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet scs = this;\r\n\t\t\r\n\t\tscs.server.get('/', function(req, res){\r\n\t\t\t  res.send('ST Server Control Service');\r\n\t\t\t});\r\n\r\n\t\tscs.routes_Sensors = new SCS_RouteSensors( scs.stServer.sensorsManager );\r\n\t\tscs.server.use('/Sensors', scs.routes_Sensors.expressRoute);\r\n\t\t\r\n\t\tscs.routes_Actuators = new SCS_RouteActuators( scs.stServer.actuatorsManager );\r\n\t\tscs.server.use('/Actuators', scs.routes_Actuators.expressRoute);\r\n\r\n\t\tscs.routes_Nodes = new SCS_RouteNodes( scs.stServer.nodesManager );\r\n\t\tscs.server.use('/Nodes', scs.routes_Nodes.expressRoute);\r\n\r\n\t\tscs.routes_Net = new SCS_RouteNet(scs.stServer.nodesManager, scs.stServer.nodesNetManager, scs.stServer.serverNetManager);\r\n\t\tscs.server.use('/Net', scs.routes_Net.expressRoute);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop service\r\n\t * \r\n\t * @throws Exceptions\r\n\t */\r\n\tstopService() {\r\n\t\t\r\n\t\tlet scs = this;\r\n\t\r\n\t\tif (scs.server === null) {\r\n\t\t\t throw \"Server not running\";\r\n\t\t}\r\n\t\t\r\n\t\tif (scs.state === scs.CONSTANTS.States.Running) {\r\n\t\t\tscs.serverSocket.close();\r\n\t\t}\r\n\t\t\r\n\t\tscs.eventEmitter.emit( scs.CONSTANTS.Events.ServerClosed );\r\n\t\tscs.server = null;\r\n\t\tscs.serverSocket = null;\r\n\t}\r\n\t\r\n}\r\n\r\nmodule.exports = ServerControlService;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}