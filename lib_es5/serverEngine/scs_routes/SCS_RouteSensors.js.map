{"version":3,"sources":["serverEngine/scs_routes/SCS_RouteSensors.js"],"names":[],"mappings":"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","file":"serverEngine/scs_routes/SCS_RouteSensors.js","sourcesContent":["\"use strict\";\r\n\r\nlet express = require('express');\r\n\r\nlet bodyParser = require('body-parser');\r\n\r\n\r\n/**\r\n * Routes for Sensors\r\n */\r\nclass SCS_RouteSensors {\r\n\r\n\tconstructor(sensorsManager) {\r\n\t\tthis.expressRoute = null;\r\n\t\tthis.messages = 0;\r\n\t\tthis.sensorsManager = sensorsManager;\r\n\t\t\r\n\t\t\r\n\t\tthis.mapServiceRoutes();\r\n\t}\r\n\t\r\n\t\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet routerSensors = this;\r\n\t\trouterSensors.expressRoute = express.Router();\r\n\t\t\r\n\t\t// create application/json parser \r\n\t\tlet jsonParser = bodyParser.json()\r\n\t\t\r\n\t\t// middleware that is specific to this router\r\n\t\trouterSensors.expressRoute.use(function messageCount(req, res, next) {\r\n\t\t\t routerSensors.messages++;\r\n\t\t\t\r\n//\t\t\tres.setHeader('Content-Type', 'text/html');\r\n//\t\t\tres.write('ST Server Nodes <br />', 'utf8')\r\n\t\t\t\r\n\t\t\t res.setHeader('Content-Type', 'application/json');\r\n\t\t\tnext();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// define the home page route\r\n\t\trouterSensors.expressRoute.get('/', function(req, res) {\r\n//\t\t\tres.write('Messages received: ' + routerNodes.messages + '<br />');\r\n//\t\t\tres.end();\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\"action\" : \"Default\",\r\n\t\t\t\t\"messagesReceived\" : routerSensors.messages\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// List of Sensors\r\n\t\trouterSensors.expressRoute.get('/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\"action\" : \"List\",\r\n\t\t\t\t\"numberOfSensors\": 0,\r\n\t\t\t\t\"sensors\" : []\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsmngr.sensorList.forEach(function(sns_, _i) {\n\t\t\t\tlet sensorData = {\r\n\t\t\t\t\t\t\"sensorID\" : sns_.config.sensorID,\r\n\t\t\t\t\t\t\"type\": sns_.config.type,\r\n\t\t\t\t\t\t\"_sysID\": sns_.config._sysID\r\n\t\t\t\t};\r\n\t\t\t\t_response.sensors.push(sensorData);\n\t\t\t})\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t_response.numberOfSensors = routerSensors.sensorsManager.sensorList.length;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Get Sensor options\r\n\t\trouterSensors.expressRoute.get('/:sensorID/options', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Get Sensor Options' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet sensorID = req.params.sensorID;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Get Options of Sensor\",\r\n\t\t\t\t\t\"sensorID\": sensorID\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensorID);\r\n\t\t\t\tif (sensorSearch.stSensor == null ) {\r\n\t\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stSensor = sensorSearch.stSensor;\r\n\t\t\t\t\r\n\t\t\t\t_response.options = stSensor.options;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Set Sensor options\r\n\t\trouterSensors.expressRoute.post('/:sensorID/options', jsonParser, function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Set Sensor Options' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet sensorID = req.params.sensorID;\r\n\t\t\t\r\n\t\t\tlet options = req.body.options;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Set Options of Sensor\",\r\n\t\t\t\t\t\"sensorID\": sensorID,\r\n\t\t\t\t\t\"options\": options\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensorID);\r\n\t\t\t\tif (sensorSearch.stSensor == null ) {\r\n\t\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stSensor = sensorSearch.stSensor;\r\n\t\t\t\t\r\n\t\t\t\tsmngr.setOptionsOfSensor(stSensor, options);\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\t\r\n\t\t\r\n\t\t\r\n\t\t// Start Sensor\r\n\t\trouterSensors.expressRoute.get('/:sensorID/start', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Sensor Start' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet sensorID = req.params.sensorID;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Start\",\r\n\t\t\t\t\t\"sensorID\": sensorID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensorID);\r\n\t\t\t\tif (sensorSearch.stSensor != null ) {\r\n\t\t\t\t\tsensorSearch.stSensor.start().then(function(value) {\r\n\t\t\t\t\t\tconsole.log( value );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <·> Sensor Started' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t}, function(reason) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_response.response = 'Sensor not found.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Stop Sensor\r\n\t\trouterSensors.expressRoute.get('/:sensorID/stop', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Sensor Stop' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet sensorID = req.params.sensorID;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Stop\",\r\n\t\t\t\t\t\"sensorID\": sensorID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensorID);\r\n\t\t\t\tif (sensorSearch.stSensor != null ) {\r\n\t\t\t\t\tsensorSearch.stSensor.stop().then(function(value) {\r\n\t\t\t\t\t\tconsole.log( value );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <·> Sensor Stopped' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t}, function(reason) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_response.response = 'Sensor not found.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Turn off Sensors of Node\r\n\t\trouterSensors.expressRoute.get('/:nodeID/turnOffSensors', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Sensors turnOffSensors' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet nodeID = req.params.nodeID;\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Turn off sensors\",\r\n\t\t\t\t\t\"sensorID\": nodeID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tsmngr.turnOffSensorsOfNode(nodeID);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t}\r\n}\r\n\r\nmodule.exports = SCS_RouteSensors;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}