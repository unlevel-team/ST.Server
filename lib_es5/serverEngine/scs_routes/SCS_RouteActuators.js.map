{"version":3,"sources":["serverEngine/scs_routes/SCS_RouteActuators.js"],"names":[],"mappings":"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","file":"serverEngine/scs_routes/SCS_RouteActuators.js","sourcesContent":["\"use strict\";\r\n\r\nlet express = require('express');\r\n\r\nlet bodyParser = require('body-parser');\r\n\r\n\r\n/**\r\n * Routes for Actuators\r\n */\r\nclass SCS_RouteActuators {\r\n\r\n\tconstructor(actuatorsManager) {\r\n\t\tthis.expressRoute = null;\r\n\t\tthis.messages = 0;\r\n\t\tthis.actuatorsManager = actuatorsManager;\r\n\t\t\r\n\t\tthis.mapServiceRoutes();\r\n\t}\r\n\t\r\n\t\r\n\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet routerActuators = this;\r\n\r\n\t\trouterActuators.expressRoute = express.Router();\r\n\t\t\r\n\t\t// create application/json parser \r\n\t\tlet jsonParser = bodyParser.json()\r\n\t\t\r\n\t\t// middleware that is specific to this router\r\n\t\trouterActuators.expressRoute.use(function messageCount(req, res, next) {\r\n\t\t\t routerActuators.messages++;\r\n\t\t\t\r\n//\t\t\tres.setHeader('Content-Type', 'text/html');\r\n//\t\t\tres.write('ST Server Nodes <br />', 'utf8')\r\n\t\t\t\r\n\t\t\t res.setHeader('Content-Type', 'application/json');\r\n\t\t\tnext();\r\n\t\t});\r\n\t\t\r\n\t\t// define the home page route\r\n\t\trouterActuators.expressRoute.get('/', function(req, res) {\r\n//\t\t\tres.write('Messages received: ' + routerActuators.messages + '<br />');\r\n//\t\t\tres.end();\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\"action\" : \"Default\",\r\n\t\t\t\t\"messagesReceived\" : routerActuators.messages\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t// List of Actuators\r\n\t\trouterActuators.expressRoute.get('/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\"action\" : \"list\",\r\n\t\t\t\t\"numberOfActuators\": 0,\r\n\t\t\t\t\"actuators\" : []\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tvar _i = 0;\r\n\t\t\tfor (_i = 0; _i < routerActuators.actuatorsManager.actuatorsList.length; _i++) {\r\n\t\t\t\tlet actuator = routerActuators.actuatorsManager.actuatorsList[_i];\r\n\t\t\t\t\r\n\t\t\t\tlet actuatorData = {\r\n\t\t\t\t\t\t\"actuatorID\" : actuator.config.actuatorID,\r\n\t\t\t\t\t\t\"type\": actuator.config.type,\r\n\t\t\t\t\t\t\"_sysID\": actuator.config._sysID\r\n\t\t\t\t};\r\n\t\t\t\t_response.actuators.push( actuatorData );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_response.numberOfActuators = routerActuators.actuatorsManager.actuatorsList.length;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Get Actuator options\r\n\t\trouterActuators.expressRoute.get('/:actuatorID/options', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Get Actuator Options' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet amngr = routerActuators.actuatorsManager;\r\n\t\t\tlet actuatorID = req.params.actuatorID;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Get Options of Actuator\",\r\n\t\t\t\t\t\"actuatorID\": actuatorID\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID(actuatorID);\r\n\t\t\t\tif (actuatorSearch.stActuator == null ) {\r\n\t\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stActuator = actuatorSearch.stActuator;\r\n\t\t\t\t\r\n\t\t\t\t_response.options = stActuator.options;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Set Actuator options\r\n\t\trouterActuators.expressRoute.post('/:actuatorID/options', jsonParser, function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Set Actuator Options' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet amngr = routerActuators.actuatorsManager;\r\n\t\t\tlet actuatorID = req.params.actuatorID;\r\n\t\t\t\r\n\t\t\tlet options = req.body.options;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Set Options of Actuator\",\r\n\t\t\t\t\t\"actuatorID\": actuatorID,\r\n\t\t\t\t\t\"options\": options\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID(actuatorID);\r\n\t\t\t\tif (actuatorSearch.stActuator == null ) {\r\n\t\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stActuator = actuatorSearch.stActuator;\r\n\t\t\t\t\r\n\t\t\t\tamngr.setOptionsOfActuator(stActuator, options);\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Start Actuator\r\n\t\trouterActuators.expressRoute.get('/:actuatorID/start', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Actuator Start' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Start\",\r\n\t\t\t\t\t\"actuatorID\": req.params.actuatorID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tvar actuatorSearch = routerActuators.actuatorsManager.getActuatorBy_sysID(req.params.actuatorID);\r\n\t\t\t\tif (actuatorSearch.stActuator != null ) {\r\n\t\t\t\t\tactuatorSearch.stActuator.start().then(function(value) {\r\n\t\t\t\t\t\tconsole.log( value );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <·> Actuator Started' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t}, function(reason) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_response.response = 'Actuator not found.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t// Stop Actuator\r\n\t\trouterActuators.expressRoute.get('/:actuatorID/stop', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Actuator Stop' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Stop\",\r\n\t\t\t\t\t\"actuatorID\": req.params.actuatorID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tvar actuatorSearch = routerActuators.actuatorsManager.getActuatorBy_sysID(req.params.actuatorID);\r\n\t\t\t\tif (actuatorSearch.stActuator != null ) {\r\n\t\t\t\t\tactuatorSearch.stActuator.stop().then(function(value) {\r\n\t\t\t\t\t\tconsole.log( value );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <·> Actuator Stopped' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t}, function(reason) {\r\n\t\t\t\t\t\tconsole.log( reason );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_response.response = 'Actuator not found.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Turn off Actuators of Node\r\n\t\trouterActuators.expressRoute.get('/:nodeID/turnOffActuators', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Actuators turnOffActuators' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Turn off actuators\",\r\n\t\t\t\t\t\"sensorID\": req.params.nodeID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\trouterActuators.actuatorsManager.turnOffActuatorsOfNode(req.params.nodeID);\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t}\r\n}\r\n\r\nmodule.exports = SCS_RouteActuators;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}