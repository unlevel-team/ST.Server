{"version":3,"sources":["serverEngine/scs_routes/SCS_RouteNetNodes.js"],"names":[],"mappings":"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","file":"serverEngine/scs_routes/SCS_RouteNetNodes.js","sourcesContent":["\"use strict\";\r\n\r\nlet express = require('express');\r\n\r\nlet bodyParser = require('body-parser');\r\n\r\n\r\n\r\n\r\n/**\r\n * Routes for Net of Nodes\r\n * Use with Server control service\r\n */\r\nclass SCS_RouteNetNodes {\r\n\t\r\n\tconstructor(nodesManager, nodesNetManager) {\r\n\t\tthis.expressRoute = null;\r\n\t\tthis.messages = 0;\r\n\t\t\r\n\t\tthis.nodesManager = nodesManager;\r\n\t\tthis.nodesNetManager = nodesNetManager;\r\n\t\t\r\n\t\tthis.mapServiceRoutes();\r\n\t}\r\n\t\r\n\t\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet routerNet = this;\r\n\t\trouterNet.expressRoute = express.Router();\r\n\t\t\r\n\t\t//create application/json parser \r\n\t\tlet jsonParser = bodyParser.json()\r\n\r\n\t\t// middleware that is specific to this router\r\n\t\trouterNet.expressRoute.use(function messageCount(req, res, next) {\r\n\t\t\t routerNet.messages++;\r\n\t\t\t\r\n//\t\t\tres.setHeader('Content-Type', 'text/html');\r\n//\t\t\tres.write('ST Server Nodes <br />', 'utf8')\r\n\t\t\t\r\n\t\t\t res.setHeader('Content-Type', 'application/json');\r\n\t\t\tnext();\r\n\t\t});\r\n\t\t\r\n\t\t// define the home page route\r\n\t\trouterNet.expressRoute.get('/', function(req, res) {\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"Default\",\r\n\t\t\t\t\"messagesReceived\" : routerNet.messages\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t// List of data channels\r\n\t\trouterNet.expressRoute.get('/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"List\",\r\n\t\t\t\t\"numberOfDataChannels\": 0,\r\n\t\t\t\t\"dataChannels\" : []\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\trouterNet.nodesNetManager.channelsList.forEach(function(dch, _i) {\r\n\t\t\t\tlet dchData = {\r\n\t\t\t\t\t\t\"channelID\" : dch.config.id,\r\n\t\t\t\t\t\t\"type\": dch.config.type,\r\n\t\t\t\t\t\t\"mode\": dch.config.mode,\r\n\t\t\t\t\t\t\"state\": dch.config.state\r\n\t\t\t\t};\r\n\t\t\t\t_response.dataChannels.push(dchData);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t_response.numberOfDataChannels = routerNet.nodesNetManager.channelsList.length;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// List of data channels for node\r\n\t\trouterNet.expressRoute.get('/:nodeID/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"List for node\",\r\n\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\"numberOfDataChannels\": 0,\r\n\t\t\t\t\"dataChannels\" : []\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tlet dchSearch = routerNet.nodesNetManager.getDataChannelsOfNode(req.params.nodeID);\r\n\t\t\t\r\n\t\t\tdchSearch.dataChannels.forEach(function(dch, _i) {\r\n\t\t\t\tlet dchData = {\r\n\t\t\t\t\t\t\"channelID\" : dch.config.id,\r\n\t\t\t\t\t\t\"type\": dch.config.type,\r\n\t\t\t\t\t\t\"mode\": dch.config.mode,\r\n\t\t\t\t\t\t\"state\": dch.config.state\r\n\t\t\t\t};\r\n\t\t\t\t_response.dataChannels.push(dchData);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t_response.numberOfDataChannels = dchSearch.dataChannels.length;\r\n\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Create data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/create/:channelID/:mode', function(req, res) {\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"Create input data channel\",\r\n\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\"channelID\" : req.params.channelID,\r\n\t\t\t\t\"mode\" : req.params.mode\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tvar dchConfig = {\r\n\t\t\t\t\t\"mode\" : null\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tswitch (_response.mode) {\r\n\t\t\t\t\tcase \"in\":\r\n\t\t\t\t\t\tdchConfig.mode = routerNet.nodesNetManager.CONSTANTS.Config.modeIN;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\r\n\t\t\t\t\tcase \"out\":\r\n\t\t\t\t\t\tdchConfig.mode = routerNet.nodesNetManager.CONSTANTS.Config.modeOUT;\r\n\t\t\t\t\t\tbreak;\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Bad mode.\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tlet nodeSearch = routerNet.nodesManager.getNodeByID(_response.nodeID);\r\n\t\t\t\tif (nodeSearch.stNode == null) {\r\n\t\t\t\t\tthrow \"Node not found.\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\trouterNet.nodesNetManager.addDataChannelToNode(nodeSearch.stNode, req.params.channelID, dchConfig);\r\n\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tthrow \"Error adding channel. \" + e.message;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.ERROR = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Delete data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/delete/:channelID/', function(req, res) {\r\n\t\t\t\r\n\t\t\tlet ndm = routerNet.nodesManager;\r\n\t\t\tlet nnetm = routerNet.nodesNetManager;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"Delete data channel\",\r\n\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\"channelID\" : req.params.channelID\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet nodeSearch = routerNet.nodesManager.getNodeByID(_response.nodeID);\r\n\t\t\t\tif (nodeSearch.stNode == null) {\r\n\t\t\t\t\tthrow \"Node not found.\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stNode = nodeSearch.stNode;\r\n\t\t\t\t\r\n\t\t\t\tlet dchSearch = routerNet.nodesNetManager.getDataChannelOfNode(_response.nodeID, _response.channelID);\r\n\t\t\t\tif (dchSearch.dataChannel == null) {\r\n\t\t\t\t\tthrow \"Data channel not found.\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttry {\r\n//\t\t\t\t\tstNode.socket.emit(event);;\r\n\t\t\t\t\tnnetm._deleteDConNode(_response.channelID, stNode);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\tthrow \"Cannor delete DC on node. \" + e;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t\r\n\t\t\t\t_response.ERROR = e;\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\r\n\t\t\r\n\t\t// Get options of data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/options/:channelID/', function(req, res) {\r\n\t\t\t\r\n\t\t\tlet ndm = routerNet.nodesManager;\r\n\t\t\tlet nnetm = routerNet.nodesNetManager;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\t\"action\" : \"Get Options of data channel\",\r\n\t\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\t\"channelID\" : req.params.channelID,\r\n\t\t\t\t\t\"options\" : {}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet nodeSearch = ndm.getNodeByID(_response.nodeID);\r\n\t\t\t\tif (nodeSearch.stNode == null) {\r\n\t\t\t\t\tthrow \"Node not found.\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stNode = nodeSearch.stNode;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tlet dchSearch = nnetm.getDataChannelOfNode(_response.nodeID, _response.channelID);\r\n\t\t\t\tif (dchSearch.dataChannel == null) {\r\n\t\t\t\t\tthrow \"Data channel not found.\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet dch = dchSearch.dataChannel;\r\n\t\t\t\t\r\n\t\t\t\t_response.options.type = dch.config.type;\r\n\t\t\t\t_response.options.mode = dch.config.mode;\r\n\t\t\t\t_response.options.state = dch.config._netState;\r\n\t\t\t\t_response.options.socketPort = dch.config.socketPort;\r\n\t\t\t\t_response.options.netLocation = dch.config.netLocation;\r\n\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t\r\n\t\t\t\t_response.ERROR = e;\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Set options of data channel on node\r\n\t\trouterNet.expressRoute.post('/:nodeID/options/:channelID/', jsonParser, function(req, res) {\r\n\t\t\t\r\n\t\t\tlet ndm = routerNet.nodesManager;\r\n\t\t\tlet nnetm = routerNet.nodesNetManager;\r\n\t\t\t\r\n\t\t\tlet options = req.body.options;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\t\"action\" : \"Set Options of data channel\",\r\n\t\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\t\"channelID\" : req.params.channelID,\r\n\t\t\t\t\t\"options\" : options\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet nodeSearch = ndm.getNodeByID(_response.nodeID);\r\n\t\t\t\tif (nodeSearch.stNode == null) {\r\n\t\t\t\t\tthrow \"Node not found.\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stNode = nodeSearch.stNode;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tlet dchSearch = nnetm.getDataChannelOfNode(_response.nodeID, _response.channelID);\r\n\t\t\t\tif (dchSearch.dataChannel == null) {\r\n\t\t\t\t\tthrow \"Data channel not found.\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet dch = dchSearch.dataChannel;\r\n\t\t\t\t\r\n\t\t\t\tnnetm.setOptionsOfDataChannel(dch, options);\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t_response.ERROR = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n}\r\n\r\n\r\nmodule.exports = SCS_RouteNetNodes;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}