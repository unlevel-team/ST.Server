{"version":3,"sources":["serverEngine/scs_routes/SCS_RouteNetServer.js"],"names":[],"mappings":"AAAA;;;;;;AAEA,IAAI,UAAU,QAAQ,SAAR,CAAd;;;;;;;IAQM,iB;AAEL,4BAAY,eAAZ,EAA6B;AAAA;;AAC5B,OAAK,YAAL,GAAoB,IAApB;AACA,OAAK,QAAL,GAAgB,CAAhB;AACA,OAAK,eAAL,GAAuB,eAAvB;;AAGA,OAAK,gBAAL;AACA;;;;qCAGkB;;AAElB,QAAK,YAAL,GAAoB,QAAQ,MAAR,EAApB;AACA,OAAI,YAAY,IAAhB;;;AAGA,QAAK,YAAL,CAAkB,GAAlB,CAAsB,SAAS,YAAT,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC,IAAhC,EAAsC;AAC1D,cAAU,QAAV;;;;;AAKA,QAAI,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACD;AACA,IARD;;;AAWA,QAAK,YAAL,CAAkB,GAAlB,CAAsB,GAAtB,EAA2B,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC7C,QAAI,YAAY;AACf,gBAAY,yBADG;AAEf,eAAW,SAFI;AAGf,yBAAqB,UAAU;;AAHhB,KAAhB;AAMA,QAAI,KAAJ,CAAU,SAAV;AACA,QAAI,GAAJ;AACA,IATD;;;AAaA,QAAK,YAAL,CAAkB,GAAlB,CAAsB,QAAtB,EAAgC,UAAS,GAAT,EAAc,GAAd,EAAmB;;AAElD,QAAI,YAAY;AACf,gBAAY,yBADG;AAEf,eAAW,MAFI;AAGf,6BAAwB,CAHT;AAIf,qBAAiB;AAJF,KAAhB;;AAQA,cAAU,eAAV,CAA0B,YAA1B,CAAuC,OAAvC,CAA+C,UAAS,GAAT,EAAc,EAAd,EAAkB;AAChE,SAAI,UAAU;AACZ,mBAAc,IAAI,MAAJ,CAAW,EADb;AAEZ,cAAQ,IAAI,MAAJ,CAAW,IAFP;AAGZ,cAAQ,IAAI,MAAJ,CAAW;AAHP,MAAd;AAKA,eAAU,YAAV,CAAuB,IAAvB,CAA4B,OAA5B;AACA,KAPD;;AASA,cAAU,oBAAV,GAAiC,UAAU,eAAV,CAA0B,YAA1B,CAAuC,MAAxE;;AAGA,QAAI,KAAJ,CAAU,SAAV;AACA,QAAI,GAAJ;AACA,IAxBD;;;AA4BA,QAAK,YAAL,CAAkB,GAAlB,CAAsB,0BAAtB,EAAkD,UAAS,GAAT,EAAc,GAAd,EAAmB;;AAEpE,QAAI,YAAY;AACf,gBAAY,yBADG;AAEf,eAAW,qBAFI;AAGf,eAAW,IAAI,MAAJ,CAAW,MAHP;AAIf,kBAAc,IAAI,MAAJ,CAAW,SAJV;AAKf,aAAS,IAAI,MAAJ,CAAW;AALL,KAAhB;;AASA,QAAI;;AAEH,SAAI,YAAY;AACf,cAAS;AADM,MAAhB;;AAIA,aAAQ,UAAU,IAAlB;AACC,WAAK,IAAL;AACC,iBAAU,IAAV,GAAiB,UAAU,eAAV,CAA0B,SAA1B,CAAoC,MAApC,CAA2C,MAA5D;AACA;;AAED,WAAK,KAAL;AACC,iBAAU,IAAV,GAAiB,UAAU,eAAV,CAA0B,SAA1B,CAAoC,MAApC,CAA2C,OAA5D;AACA;;AAED;AACC,aAAM,WAAN;AACA;AAXF;;AAcA,eAAU,gBAAV,CAA2B,sBAA3B,CAAkD,IAAI,MAAJ,CAAW,SAA7D,EAAwE,SAAxE;AAEA,KAtBD,CAsBE,OAAO,CAAP,EAAU;;;;AAIX,eAAU,KAAV,GAAkB,EAAE,OAApB;AACA;;AAGD,QAAI,KAAJ,CAAU,SAAV;AACA,QAAI,GAAJ;AACA,IA3CD;AA8CA","file":"serverEngine/scs_routes/SCS_RouteNetServer.js","sourcesContent":["\"use strict\";\r\n\r\nlet express = require('express');\r\n\r\n\r\n\r\n/**\r\n * Routes for Net of Server\r\n * Use with Server control service\r\n */\r\nclass SCS_RouteNetNodes {\r\n\t\r\n\tconstructor(severNetManager) {\r\n\t\tthis.expressRoute = null;\r\n\t\tthis.messages = 0;\r\n\t\tthis.severNetManager = severNetManager;\r\n\t\t\r\n\t\t\r\n\t\tthis.mapServiceRoutes();\r\n\t}\r\n\t\r\n\t\r\n\tmapServiceRoutes() {\r\n\t\t\t\r\n\t\tthis.expressRoute = express.Router();\r\n\t\tlet routerNet = this;\r\n\t\t\r\n\t\t// middleware that is specific to this router\r\n\t\tthis.expressRoute.use(function messageCount(req, res, next) {\r\n\t\t\t routerNet.messages++;\r\n\t\t\t\r\n//\t\t\tres.setHeader('Content-Type', 'text/html');\r\n//\t\t\tres.write('ST Server Nodes <br />', 'utf8')\r\n\t\t\t\r\n\t\t\t res.setHeader('Content-Type', 'application/json');\r\n\t\t\tnext();\r\n\t\t});\r\n\t\t\r\n\t\t// define the home page route\r\n\t\tthis.expressRoute.get('/', function(req, res) {\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Server\",\r\n\t\t\t\t\"action\" : \"Default\",\r\n\t\t\t\t\"messagesReceived\" : routerNet.messages\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\t\r\n\t\t\r\n\t\t// List of data channels\r\n\t\tthis.expressRoute.get('/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Server\",\r\n\t\t\t\t\"action\" : \"List\",\r\n\t\t\t\t\"numberOfDataChannels\": 0,\r\n\t\t\t\t\"dataChannels\" : []\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\trouterNet.severNetManager.channelsList.forEach(function(dch, _i) {\r\n\t\t\t\tlet dchData = {\r\n\t\t\t\t\t\t\"channelID\" : dch.config.id,\r\n\t\t\t\t\t\t\"type\": dch.config.type,\r\n\t\t\t\t\t\t\"mode\": dch.config.mode\r\n\t\t\t\t};\r\n\t\t\t\t_response.dataChannels.push(dchData);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t_response.numberOfDataChannels = routerNet.nodesNetManager.channelsList.length;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Create data channel on server\r\n\t\tthis.expressRoute.get('/create/:channelID/:mode', function(req, res) {\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Server\",\r\n\t\t\t\t\"action\" : \"Create data channel\",\r\n\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\"channelID\" : req.params.channelID,\r\n\t\t\t\t\"mode\" : req.params.mode\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tvar dchConfig = {\r\n\t\t\t\t\t\"mode\" : null\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tswitch (_response.mode) {\r\n\t\t\t\t\tcase \"in\":\r\n\t\t\t\t\t\tdchConfig.mode = routerNet.nodesNetManager.CONSTANTS.Config.modeIN;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\r\n\t\t\t\t\tcase \"out\":\r\n\t\t\t\t\t\tdchConfig.mode = routerNet.nodesNetManager.CONSTANTS.Config.modeOUT;\r\n\t\t\t\t\t\tbreak;\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Bad mode.\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\trouterNet.serverNetManager.addDataChannelToServer(req.params.channelID, dchConfig);\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.ERROR = e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\r\n\t\t\t\r\n\t}\r\n}"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}