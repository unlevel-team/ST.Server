{"version":3,"sources":["serverEngine/scs_routes/SCS_RouteNodes.js"],"names":[],"mappings":"AAAA;;;;;;AAEA,IAAI,UAAU,QAAQ,SAAR,CAAd;;;;;;IAQM,c;AAEL,yBAAY,YAAZ,EAA0B;AAAA;;AACzB,OAAK,YAAL,GAAoB,IAApB;AACA,OAAK,QAAL,GAAgB,CAAhB;AACA,OAAK,YAAL,GAAoB,YAApB;;AAGA,OAAK,gBAAL;AACA;;;;;;;;;qCAKkB;;AAElB,OAAI,cAAc,IAAlB;AACA,eAAY,YAAZ,GAA2B,QAAQ,MAAR,EAA3B;;;AAIA,eAAY,YAAZ,CAAyB,GAAzB,CAA6B,SAAS,YAAT,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC,IAAhC,EAAsC;AACjE,gBAAY,QAAZ;;;;;AAKA,QAAI,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACD;AACA,IARD;;;AAWA,eAAY,YAAZ,CAAyB,GAAzB,CAA6B,GAA7B,EAAkC,UAAS,GAAT,EAAc,GAAd,EAAmB;;;AAGpD,QAAI,YAAY;AACf,gBAAY,iBADG;AAEf,eAAW,SAFI;AAGf,yBAAqB,YAAY;;AAHlB,KAAhB;AAMA,QAAI,KAAJ,CAAU,SAAV;AACA,QAAI,GAAJ;AACA,IAXD;;;;;;;;;;;;;;;AA2BA,eAAY,YAAZ,CAAyB,GAAzB,CAA6B,QAA7B,EAAuC,UAAS,GAAT,EAAc,GAAd,EAAmB;;AAEzD,QAAI,YAAY;AACf,gBAAY,iBADG;AAEf,eAAW,MAFI;AAGf,sBAAiB,CAHF;AAIf,cAAU;AAJK,KAAhB;;AAOA,QAAI,KAAK,CAAT;AACA,SAAK,KAAK,CAAV,EAAa,KAAK,YAAY,YAAZ,CAAyB,QAAzB,CAAkC,MAApD,EAA4D,IAA5D,EAAkE;AACjE,SAAI,OAAO,YAAY,YAAZ,CAAyB,QAAzB,CAAkC,EAAlC,CAAX;;AAEA,SAAI,WAAW;AACb,gBAAW,KAAK,MAAL,CAAY,MADV;AAEb,cAAQ,KAAK,MAAL,CAAY,IAFP;AAGb,oBAAc,KAAK,MAAL,CAAY,UAHb;AAIb,sBAAgB,KAAK,MAAL,CAAY;AAJf,MAAf;AAMA,eAAU,KAAV,CAAgB,IAAhB,CAAqB,QAArB;AACA;;AAED,cAAU,aAAV,GAA0B,YAAY,YAAZ,CAAyB,QAAzB,CAAkC,MAA5D;;AAGA,QAAI,KAAJ,CAAU,SAAV;AACA,QAAI,GAAJ;AACA,IA3BD;;;AA+BA,eAAY,YAAZ,CAAyB,GAAzB,CAA6B,mBAA7B,EAAkD,UAAS,GAAT,EAAc,GAAd,EAAmB;;AAEpE,YAAQ,GAAR,CAAY,yCAAZ,E;;AAEA,QAAI,YAAY;AACd,gBAAY,iBADE;AAEd,eAAW,UAFG;AAGd,iBAAY,IAAI,MAAJ,CAAW,MAHT;AAId,iBAAa;AAJC,KAAhB;;AAQA,QAAI;;AAEH,iBAAY,YAAZ,CAAyB,YAAzB,CAAsC,IAAI,MAAJ,CAAW,MAAjD;AAEA,KAJD,CAIE,OAAO,CAAP,EAAU;;;AAGX,eAAU,QAAV,GAAqB,uBAArB;AACA,eAAU,KAAV,GAAkB,EAAE,OAApB;AACA;;AAGD,QAAI,KAAJ,CAAU,SAAV;AACA,QAAI,GAAJ;AAEA,IA3BD;AA6BA;;;;;;AAKF,OAAO,OAAP,GAAiB,cAAjB","file":"serverEngine/scs_routes/SCS_RouteNodes.js","sourcesContent":["\"use strict\";\r\n\r\nlet express = require('express');\r\n\r\n\r\n\r\n\r\n/**\r\n * Routes for Nodes\r\n */\r\nclass SCS_RouteNodes {\r\n\t\r\n\tconstructor(nodesManager) {\r\n\t\tthis.expressRoute = null;\r\n\t\tthis.messages = 0;\r\n\t\tthis.nodesManager = nodesManager;\r\n\t\t\r\n\t\t\r\n\t\tthis.mapServiceRoutes();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Map routes of service\r\n\t */\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet routerNodes = this;\r\n\t\trouterNodes.expressRoute = express.Router();\r\n\t\t\r\n\t\t\r\n\t\t// middleware that is specific to this router\r\n\t\trouterNodes.expressRoute.use(function messageCount(req, res, next) {\r\n\t\t\t routerNodes.messages++;\r\n\t\t\t\r\n//\t\t\tres.setHeader('Content-Type', 'text/html');\r\n//\t\t\tres.write('ST Server Nodes <br />', 'utf8')\r\n\t\t\t\r\n\t\t\t res.setHeader('Content-Type', 'application/json');\r\n\t\t\tnext();\r\n\t\t});\r\n\t\t\r\n\t\t// define the home page route\r\n\t\trouterNodes.expressRoute.get('/', function(req, res) {\r\n//\t\t\tres.write('Messages received: ' + routerNodes.messages + '<br />');\r\n//\t\t\tres.end();\r\n\t\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Nodes\",\r\n\t\t\t\t\"action\" : \"Default\",\r\n\t\t\t\t\"messagesReceived\" : routerNodes.messages\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t// define the home page route with commands\r\n//\t\trouterNodes.expressRoute.get('/:command', function(req, res) {\r\n//\r\n//\t\t\tlet _response = {\r\n//\t\t\t\t\t\"context\" : \"ST Server Nodes\",\r\n//\t\t\t\t\t\"action\" : \"Command\",\r\n//\t\t\t\t\t\"commandReceived\" : req.params.command\r\n//\t\t\t\t\t\r\n//\t\t\t\t};\r\n//\t\t\tres.jsonp(_response);\r\n//\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// List of Nodes\r\n\t\trouterNodes.expressRoute.get('/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\"context\" : \"ST Server Nodes\",\r\n\t\t\t\t\"action\" : \"list\",\r\n\t\t\t\t\"numberOfNodes\": 0,\r\n\t\t\t\t\"nodes\" : []\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tvar _i = 0;\r\n\t\t\tfor (_i = 0; _i < routerNodes.nodesManager.nodeList.length; _i++) {\r\n\t\t\t\tlet node = routerNodes.nodesManager.nodeList[_i];\r\n\t\t\t\t\r\n\t\t\t\tlet nodeData = {\r\n\t\t\t\t\t\t\"nodeID\" : node.config.nodeID,\r\n\t\t\t\t\t\t\"type\": node.config.type,\r\n\t\t\t\t\t\t\"numSensors\": node.config.numSensors,\r\n\t\t\t\t\t\t\"numActuators\": node.config.numActuators\r\n\t\t\t\t};\r\n\t\t\t\t_response.nodes.push(nodeData);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_response.numberOfNodes = routerNodes.nodesManager.nodeList.length;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Shut down Node\r\n\t\trouterNodes.expressRoute.get('/:nodeID/shutdown', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Nodes shutdown' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Nodes\",\r\n\t\t\t\t\t\"action\" : \"shutdown\",\r\n\t\t\t\t\t\"sensorID\": req.params.nodeID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\trouterNodes.nodesManager.shutDownNode(req.params.nodeID);\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nmodule.exports = SCS_RouteNodes;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}