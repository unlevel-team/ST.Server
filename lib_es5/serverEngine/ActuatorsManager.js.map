{"version":3,"sources":["serverEngine/ActuatorsManager.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAeA,IAAI,eAAe,QAAQ,QAAR,EAAkB,YAArC;;;;;AAOA,IAAM,6BAA6B;AACjC,WAAW;AACV,oBAAmB,WADT;AAEV,kBAAiB;;AAFP,EADsB;;AAOjC,WAAW;AACV,kBAAiB,QADP;AAEV,iBAAgB,OAFN;AAGV,mBAAkB,SAHR;AAIV,gBAAe;AAJL,EAPsB;;AAejC,WAAW;AACV,qBAAoB,kBADV;;AAGV,mBAAkB,eAHR;AAIV,qBAAoB,iBAJV;AAKV,kBAAiB,cALP;AAMV,qBAAoB;AANV,EAfsB;;AAwBjC,aAAa;AACZ,sBAAqB,oBADT;AAEZ,mBAAkB,gBAFN;AAGZ,qBAAoB,mBAHR;AAIZ,kBAAiB,eAJL;AAKZ,wBAAuB,sBALX;AAMZ,wBAAuB,sBANX;AAOZ,qBAAoB,kBAPR;AAQZ,4BAA2B,0BARf;;AAUZ,mBAAkB,eAVN;AAWZ,qBAAoB,iBAXR;AAYZ,kBAAiB,cAZL;AAaZ,qBAAoB,iBAbR;;AAgBZ,sBAAqB;AAhBT;AAxBoB,CAAnC;;;;;;IAiDM,Q;AAEL,mBAAY,MAAZ,EAAoB;AAAA;;AACnB,OAAK,MAAL,GAAc,MAAd;AACA,OAAK,YAAL,GAAoB,IAAI,YAAJ,EAApB;;AAEA,OAAK,SAAL,GAAiB,0BAAjB;AACA,OAAK,KAAL,GAAa,2BAA2B,MAA3B,CAAkC,YAA/C;;AAEA,OAAK,OAAL,GAAe,IAAf;AACA;;;;;;;;;+BAKY;;AAEZ,QAAK,kBAAL;AACA,QAAK,KAAL,GAAa,2BAA2B,MAA3B,CAAkC,WAA/C;AACA;;;;;;;;uCAMoB;;AAEpB,OAAI,aAAa,IAAjB;;AAGA,OAAI,WAAW,KAAX,KAAqB,WAAW,SAAX,CAAqB,MAArB,CAA4B,YAArD,EAAmE;AAClE,UAAM,YAAN;AACA;;;;;;;;;;;;;;;;AAiBD;;;;;;;;0BAKO;;AAEP,OAAI,aAAa,IAAjB;;AAEA,UAAO,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;;AAE5C,QAAI,UAAU;AACb,mBAAe,WAAW,MAAX,CAAkB,UADpB;AAEb,eAAW;;AAFE,KAAd;;AAMA,eAAW,MAAX,CAAkB,cAAlB,CAAiC,IAAjC,CAAsC,WAAW,SAAX,CAAqB,QAArB,CAA8B,aAApE,EAAoF,OAApF;;AAEA,YAAQ,OAAR;AAEA,IAZM,CAAP;AAcA;;;;;;;;yBAMM;;AAEN,OAAI,aAAa,IAAjB;;AAEA,UAAO,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;;AAE5C,QAAI,UAAU;AACb,mBAAe,WAAW,MAAX,CAAkB,UADpB;AAEb,eAAW;;AAFE,KAAd;;AAMA,eAAW,MAAX,CAAkB,cAAlB,CAAiC,IAAjC,CAAsC,WAAW,SAAX,CAAqB,QAArB,CAA8B,YAApE,EAAmF,OAAnF;AACA,YAAQ,OAAR;AACA,IAVM,CAAP;AAWA;;;;;;;;;;;IASI,gB;AAGL,6BAAc;AAAA;;AAEb,OAAK,aAAL,GAAqB,EAArB;AACA,OAAK,YAAL,GAAoB,IAAI,YAAJ,EAApB;;AAEA,OAAK,SAAL,GAAiB,0BAAjB;;AAGA,OAAK,WAAL,GAAmB,IAAnB;AACA;;;;;;;;;uCAMoB,M,EAAQ;;AAE5B,OAAI,QAAQ,IAAZ;AACA,OAAI,UAAU,MAAd;;;;AAKA,UAAO,YAAP,CAAoB,EAApB,CAAwB,OAAO,SAAP,CAAiB,MAAjB,CAAwB,gBAAhD,EAAkE,UAAS,IAAT,EAAe;;AAEhF,QAAI,cAAc,MAAM,kBAAN,CAA0B,KAAK,IAAL,CAAU,MAAV,CAAiB,MAA3C,CAAlB;;AAEA,gBAAY,SAAZ,CAAsB,OAAtB,CAA8B,UAAS,QAAT,EAAmB,EAAnB,EAAuB,UAAvB,EAAmC;;AAEhE,SAAI,iBAAiB,MAAM,mBAAN,CAA2B,SAAS,MAAT,CAAgB,MAA3C,CAArB;AACA,SAAK,eAAe,UAAf,KAA8B,IAAnC,EAA0C;AACzC,YAAM,aAAN,CAAoB,MAApB,CAA2B,eAAe,QAA1C,EAAoD,CAApD;AACA;AAED,KAPD;AASA,IAbD;;;;AAkBA,UAAO,MAAP,CAAc,EAAd,CAAiB,YAAjB,EAA+B,YAAW;AACzC,WAAO,MAAP,CAAc,kBAAd,CAAiC,MAAM,SAAN,CAAgB,QAAhB,CAAyB,eAA1D;AACA,WAAO,MAAP,CAAc,kBAAd,CAAiC,MAAM,SAAN,CAAgB,QAAhB,CAAyB,eAA1D;AACA,WAAO,MAAP,CAAc,kBAAd,CAAiC,MAAM,SAAN,CAAgB,QAAhB,CAAyB,eAA1D;AACA,WAAO,MAAP,CAAc,kBAAd,CAAiC,MAAM,SAAN,CAAgB,QAAhB,CAAyB,sBAA1D;AACA,WAAO,MAAP,CAAc,kBAAd,CAAiC,MAAM,SAAN,CAAgB,QAAhB,CAAyB,aAA1D;AAEA,IAPD;;;AAWA,UAAO,MAAP,CAAc,EAAd,CAAkB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,eAA3C,EAA4D,UAAS,GAAT,EAAc;;;AAKzE,UAAM,YAAN,CAAmB,IAAnB,CAAyB,MAAM,SAAN,CAAgB,MAAhB,CAAuB,eAAhD;AACA,IAND;;;AAUA,UAAO,MAAP,CAAc,EAAd,CAAkB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,eAA3C,EAA4D,UAAS,GAAT,EAAc;;;AAMzE,UAAM,YAAN,CAAmB,IAAnB,CAAyB,MAAM,SAAN,CAAgB,MAAhB,CAAuB,eAAhD;AACA,IAPD;;;AAWA,UAAO,MAAP,CAAc,EAAd,CAAkB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,eAA3C,EAA4D,UAAS,GAAT,EAAc;;AAEzE,UAAM,oBAAN,CAA2B,GAA3B,EAAgC,MAAhC,EACC,EAAE,cAAe,IAAI,UAArB;AACC,gBAAW,IAAI;AADhB,KADD;AAKA,IAPD;;;AAWA,UAAO,MAAP,CAAc,EAAd,CAAkB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,sBAA3C,EAAmE,UAAS,GAAT,EAAc;;AAEhF,UAAM,2BAAN,CAAkC,GAAlC,EAAuC,MAAvC,EAA+C,EAAG,cAAe,IAAI,UAAtB,EAA/C;AAEA,IAJD;;;AAQA,UAAO,MAAP,CAAc,EAAd,CAAiB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,aAA1C,EAAyD,UAAS,IAAT,EAAc;;AAEtE,UAAM,kBAAN,CAAyB,IAAzB,EAA+B,MAA/B,EAAuC,EAAC,QAAS,IAAV,EAAvC;AAEE,IAJH;;AAOA,OAAK,OAAO,MAAP,CAAc,YAAd,GAA6B,CAAlC,EAAsC;;;AAGrC,WAAO,MAAP,CAAc,IAAd,CAAoB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,gBAA7C;AACA;AAED;;;;;;;;8BAMW,M,EAAQ;;AAEnB,OAAI,QAAQ,IAAZ;AACA,OAAI,aAAa,IAAI,QAAJ,CAAc,MAAd,CAAjB;;AAEA,OAAI,gBAAgB,WAAW,MAAX,CAAkB,cAAtC;;;AAGA,cAAW,YAAX,CAAwB,EAAxB,CAA2B,2BAA2B,MAA3B,CAAkC,eAA7D,EAA8E,YAAW;;AAExF,YAAQ,GAAR,CAAY,yCAAZ,E;AACA,YAAQ,GAAR,CAAY,YAAY,WAAW,MAAX,CAAkB,EAA1C,E;AAEA,IALD;;;AASA,cAAW,YAAX,CAAwB,EAAxB,CAA2B,2BAA2B,MAA3B,CAAkC,eAA7D,EAA8E,YAAW;;AAExF,YAAQ,GAAR,CAAY,yCAAZ,E;AACA,YAAQ,GAAR,CAAY,YAAY,WAAW,MAAX,CAAkB,EAA1C,E;AAEA,IALD;;AAQA,cAAW,UAAX;AACA,SAAM,aAAN,CAAoB,IAApB,CAA0B,UAA1B;;;AAGA,iBAAc,IAAd,CAAmB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,kBAA5C,EAAgE,EAAC,cAAc,WAAW,MAAX,CAAkB,UAAjC,EAAhE;AAEA;;;;;;;;sCAMmB,U,EAAY;;AAE/B,OAAI,QAAQ,IAAZ;AACA,OAAI,WAAW,IAAf;AACA,OAAI,KAAK,CAAT;;AAEA,QAAK,MAAM,aAAN,CAAoB,GAApB,CAAwB,UAAS,CAAT,EAAY;AAAC,WAAO,EAAE,MAAF,CAAS,MAAhB;AAAyB,IAA9D,EAAgE,OAAhE,CAAwE,UAAxE,CAAL;AACA,OAAI,OAAO,CAAC,CAAZ,EAAe;AACd,eAAW,MAAM,aAAN,CAAoB,EAApB,CAAX;AACA;;;;;;;;;AASD,UAAO;AACN,kBAAc,QADR;AAEN,gBAAY;AAFN,IAAP;AAKA;;;;;;;;qCAMkB,M,EAAQ;;AAE1B,OAAI,QAAQ,IAAZ;;AAEA,OAAI,YAAY,MAAM,aAAN,CAAoB,MAApB,CAA2B,UAAS,QAAT,EAAmB,EAAnB,EAAuB,UAAvB,EAAmC;;AAE7E,QAAI,SAAS,MAAT,CAAgB,YAAhB,KAAiC,MAArC,EAA6C;AAC5C,YAAO,IAAP;AACA;AAED,IANe,CAAhB;;AAQA,UAAO;AACN,oBAAgB,UAAU,MADpB;AAEN,iBAAa;AAFP,IAAP;AAKA;;;;;;;;yCAMsB,M,EAAQ;;AAE9B,OAAI,QAAQ,IAAZ;;;AAGA,WAAQ,GAAR,CAAY,gDAAZ,E;AACA,WAAQ,GAAR,CAAY,MAAZ,E;;AAEA,OAAI,kBAAkB,MAAM,kBAAN,CAAyB,MAAzB,CAAtB;;AAEA,OAAI,gBAAgB,SAAhB,KAA8B,IAAlC,EAAwC;;AAEvC,YAAQ,GAAR,CAAY,mBAAZ,E;;;AAGA,oBAAgB,SAAhB,CAA0B,CAA1B,EAA6B,MAA7B,CAAoC,cAApC,CAAmD,IAAnD,CAAwD,MAAM,SAAN,CAAgB,QAAhB,CAAyB,gBAAjF;AAEA,IAPD,MAOO;AACN,YAAQ,GAAR,CAAY,wBAAZ,E;AACA;AAED;;;;;;;;uCAOoB,G,EAAK;;AAEzB,OAAI,QAAQ,IAAZ;AACA,OAAI,gBAAgB,IAAI,MAAJ,CAAW,cAA/B;;AAEA,WAAQ,GAAR,CAAY,8CAAZ,E;;;AAGA,iBAAc,IAAd,CAAmB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,kBAA5C,EACE,EAAC,cAAe,IAAI,MAAJ,CAAW,UAA3B,EADF;AAGA;;;;;;;;uCAMoB,G,EAAK,O,EAAS;;AAElC,OAAI,QAAQ,IAAZ;AACA,OAAI,gBAAgB,IAAI,MAAJ,CAAW,cAA/B;;AAEA,WAAQ,GAAR,CAAY,8CAAZ,E;AACA,WAAQ,GAAR,CAAY,OAAZ,E;;AAEA,iBAAc,IAAd,CAAmB,MAAM,SAAN,CAAgB,QAAhB,CAAyB,kBAA5C,EACE,EAAC,cAAe,IAAI,MAAJ,CAAW,UAA3B,EAAuC,WAAY,OAAnD,EADF,E;AAGA;;;;;;;;qCAMkB,G,EAAK,M,EAAQ,O,EAAS;;AAExC,OAAI,QAAQ,IAAZ;AACA,OAAI,gBAAgB,OAAO,MAA3B;AACA,OAAI,OAAO,QAAQ,IAAnB;;AAEE,OAAI,KAAK,YAAL,GAAoB,CAAxB,EAA4B;;AAE3B,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAS,GAAT,EAAc,EAAd,EAAkB;;AAExC,SAAI,MAAJ,GAAa,OAAO,MAAP,CAAc,MAAd,GAAuB,GAAvB,GAA6B,IAAI,UAA9C;AACA,SAAI,UAAJ,GAAiB,MAAjB;AACA,SAAI,YAAJ,GAAmB,OAAO,MAAP,CAAc,MAAjC;AACA,SAAI,aAAJ,GAAoB,OAAO,YAA3B;AACA,SAAI,cAAJ,GAAqB,aAArB;;AAEA,WAAM,WAAN,CAAmB,GAAnB;AAEA,KAVD;AAYA;AAEH;;;;;;;;uCAMoB,G,EAAK,M,EAAQ,O,EAAS;;AAE1C,OAAI,QAAQ,IAAZ;AACA,OAAI,gBAAgB,OAAO,MAA3B;;AAEA,WAAQ,GAAR,CAAY,8CAAZ,E;AACA,WAAQ,GAAR,CAAY,OAAZ,E;;AAEA,OAAI,aAAa,QAAQ,UAAzB;AACA,OAAI,kBAAkB,QAAQ,OAA9B;;AAEA,OAAI,iBAAiB,OAAO,MAAP,CAAc,MAAd,GAAuB,GAAvB,GAA6B,UAAlD;;AAEA,OAAI,WAAW;AACb,kBAAc;AADD,IAAf;;AAKA,OAAI;;AAEH,QAAI,iBAAiB,MAAM,mBAAN,CAA0B,cAA1B,CAArB;AACA,QAAI,eAAe,UAAf,KAA8B,IAAlC,EAAwC;AACvC,WAAM,kBAAN;AACA;;AAED,QAAI,MAAM,eAAe,UAAzB;;AAEA,QAAI,OAAJ,GAAc,eAAd;AAEA,IAXD,CAWE,OAAO,CAAP,EAAU;;AAEX,aAAS,MAAT,GAAkB,OAAlB;AACA,aAAS,KAAT,GAAiB,CAAjB;;AAEC,YAAQ,GAAR,CAAY,kDAAZ,E;AACA,YAAQ,GAAR,CAAY,QAAZ,E;AACD;AAED;;;;;;;;8CAM2B,G,EAAK,M,EAAQ,O,EAAS;;AAEjD,OAAI,QAAQ,IAAZ;;AAEA,OAAI,aAAa,QAAQ,UAAzB;AACA,OAAI,gBAAgB,OAAO,MAA3B;;AAEA,OAAI,iBAAiB,OAAO,MAAP,CAAc,MAAd,GAAuB,GAAvB,GAA6B,UAAlD;;AAGA,OAAI,WAAW;AACb,kBAAc;AADD,IAAf;;AAKA,WAAQ,GAAR,CAAY,gDAAZ,E;AACA,WAAQ,GAAR,CAAY,GAAZ,E;;AAEA,OAAI;;AAEH,QAAI,iBAAiB,MAAM,mBAAN,CAA0B,cAA1B,CAArB;AACA,QAAI,eAAe,UAAf,KAA8B,IAAlC,EAAwC;AACvC,WAAM,oBAAN;AACA;;AAED,QAAI,MAAM,eAAe,UAAzB;;AAEA,UAAM,oBAAN,CAA2B,GAA3B;AAEA,IAXD,CAWE,OAAO,CAAP,EAAU;;AAEX,aAAS,MAAT,GAAkB,OAAlB;AACA,aAAS,KAAT,GAAiB,CAAjB;;AAEC,YAAQ,GAAR,CAAY,0DAAZ,E;AACA,YAAQ,GAAR,CAAY,QAAZ,E;AACD;AAED;;;;;;AAKF,OAAO,OAAP,GAAiB,gBAAjB","file":"serverEngine/ActuatorsManager.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Actuators manager\r\n \r\n - Manages actuators\r\n - Adds actuators from node\r\n - Get actuator by id\r\n - Get actuators by node\r\n - Start/Stop actuator\r\n - Turn off actuators of node\r\n \r\n */\r\n\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n\r\n/**\r\n * ActuatorsManager CONSTANTS\r\n */\r\nconst ActuatorsManager_CONSTANTS = {\r\n\t\t\"Config\" : {\r\n\t\t\t\"type_Vactuator\" : \"vactuator\",\r\n\t\t\t\"type_Cylonjs\" : \"cylonjs\"\r\n\r\n\t\t},\r\n\t\t\r\n\t\t\"States\" : {\r\n\t\t\t\"State_Config\" : \"config\",\r\n\t\t\t\"State_Ready\" : \"ready\",\r\n\t\t\t\"State_Working\" : \"working\",\r\n\t\t\t\"State_Stop\" : \"stop\"\r\n\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\"Events\" : {\r\n\t\t\t\"ActuatorRemoved\" : \"Actuator Removed\",\r\n\t\t\t\r\n\t\t\t\"StartActuator\" : \"StartActuator\",\r\n\t\t\t\"ActuatorStarted\" : \"ActuatorStarted\",\r\n\t\t\t\"StopActuator\" : \"StopActuator\",\r\n\t\t\t\"ActuatorStopped\" : \"ActuatorStopped\",\r\n\t\t},\r\n\t\t\r\n\t\t\"Messages\" : {\r\n\t\t\t\"getActuatorsList\" : \"Get Actuators List\",\r\n\t\t\t\"ActuatorsList\" : \"Actuators List\",\r\n\t\t\t\"getActuatorInfo\" : \"Get Actuator Info\",\r\n\t\t\t\"ActuatorInfo\" : \"Actuator Info\",\r\n\t\t\t\"getActuatorOptions\" : \"Get Actuator Options\",\r\n\t\t\t\"setActuatorOptions\" : \"Set Actuator Options\",\r\n\t\t\t\"ActuatorOptions\" : \"Actuator Options\",\r\n\t\t\t\"ActuatorOptionsUpdated\" : \"Actuator Options Updated\",\r\n\t\t\t\r\n\t\t\t\"StartActuator\" : \"StartActuator\",\r\n\t\t\t\"ActuatorStarted\" : \"ActuatorStarted\",\r\n\t\t\t\"StopActuator\" : \"StopActuator\",\r\n\t\t\t\"ActuatorStopped\" : \"ActuatorStopped\",\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\"TurnOffActuators\" : \"TurnOffActuators\"\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n/**\r\n * Actuator\r\n */\r\nclass Actuator {\r\n\t\r\n\tconstructor(config) {\r\n\t\tthis.config = config;\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = ActuatorsManager_CONSTANTS;\r\n\t\tthis.state = ActuatorsManager_CONSTANTS.States.State_Config;\r\n\t\t\r\n\t\tthis.options = null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tthis.mapControlMessages();\r\n\t\tthis.state = ActuatorsManager_CONSTANTS.States.State_Ready;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t */\r\n\tmapControlMessages() {\r\n\t\t\r\n\t\tlet stActuator = this;\r\n\r\n\t\t\r\n\t\tif (stActuator.state !== stActuator.CONSTANTS.States.State_Config) {\r\n\t\t\tthrow \"Bad state.\";\r\n\t\t}\r\n\t\t\r\n//\t\tstActuator.config._controlSocket.on(\"disconnect\", function() {\n//\t\t\tstActuator.config._controlSocket.removeAllListeners(stActuator.CONSTANTS.Messages.ActuatorStarted);\r\n//\t\t\tstActuator.config._controlSocket.removeAllListeners(stActuator.CONSTANTS.Messages.ActuatorStopped);\r\n//\n//\t\t})\r\n//\t\t\r\n//\t\tstActuator.config._controlSocket.on( stActuator.CONSTANTS.Messages.ActuatorStarted, function(msg) {\r\n//\t\t\tstActuator.eventEmitter.emit( stActuator.CONSTANTS.Events.ActuatorStarted );\r\n//\t\t});\r\n//\t\t\r\n//\t\tstActuator.config._controlSocket.on( stActuator.CONSTANTS.Messages.ActuatorStopped, function(msg) {\r\n//\t\t\tstActuator.eventEmitter.emit( stActuator.CONSTANTS.Events.ActuatorStopped );\r\n//\r\n//\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Start actuator\r\n\t */\r\n\tstart() {\r\n\t\t\r\n\t\tlet stActuator = this;\r\n\r\n\t\treturn new Promise(function(resolve, reject) {\r\n\t\t\t\r\n\t\t\tvar request = {\r\n\t\t\t\t\"actuatorID\" : stActuator.config.actuatorID,\r\n\t\t\t\t\"result\" : null\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tstActuator.config._controlSocket.emit(stActuator.CONSTANTS.Messages.StartActuator , request);\r\n\t\t\t\r\n\t\t\tresolve(request);\r\n\t\t\t\r\n\t\t});\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop actuator\r\n\t */\r\n\tstop() {\r\n\t\t\r\n\t\tlet stActuator = this;\r\n\t\t\r\n\t\treturn new Promise(function(resolve, reject) {\r\n\t\t\t\r\n\t\t\tvar request = {\r\n\t\t\t\t\"actuatorID\" : stActuator.config.actuatorID,\r\n\t\t\t\t\"result\" : null\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tstActuator.config._controlSocket.emit(stActuator.CONSTANTS.Messages.StopActuator , request);\r\n\t\t\tresolve(request);\r\n\t\t});\r\n\t}\t\r\n\t\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * ActuatorsManager\r\n */\r\nclass ActuatorsManager {\r\n\t\r\n\t\r\n\tconstructor() {\r\n\t\t\r\n\t\tthis.actuatorsList = [];\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = ActuatorsManager_CONSTANTS;\r\n\r\n\t\t\r\n\t\tthis.nodeCtrlSrv = null;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add Actuators from Node\r\n\t */\r\n\taddActuatorsFromNode(stNode) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n\t\tlet _stNode = stNode;\r\n\t\t\r\n\t\t\r\n\t\t// ~ ~ ~ ~ ~ ~  # #  ~ ~ ~ ~ ~ ~  ###  ~ ~ ~ ~ ~ ~  # # ~ ~ ~ ~ ~ ~ |\\/|~~~  \r\n\t\t// Event NodeDisconnected\r\n\t\tstNode.eventEmitter.on( stNode.CONSTANTS.Events.NodeDisconnected, function(data) {\r\n\r\n\t\t\tlet stActuators = amngr.getActuatorsByNode( data.node.config.nodeID );\r\n\t\t\t\r\n\t\t\tstActuators.actuators.forEach(function(actuator, _i, _actuators) {\r\n\t\t\t\t\r\n\t\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID( actuator.config._sysID );\r\n\t\t\t\tif ( actuatorSearch.stActuator !== null ) {\r\n\t\t\t\t\tamngr.actuatorsList.splice(actuatorSearch.position, 1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t// ~ ~ ~ ~ ~ ~  # #  ~ ~ ~ ~ ~ ~  ###  ~ ~ ~ ~ ~ ~  # # ~ ~ ~ ~ ~ ~ |/\\|~~~  \r\n\t\t\r\n\t\t\r\n\t\t// Map event disconnect\r\n\t\tstNode.socket.on(\"disconnect\", function() {\r\n\t\t\tstNode.socket.removeAllListeners(amngr.CONSTANTS.Messages.ActuatorStarted);\r\n\t\t\tstNode.socket.removeAllListeners(amngr.CONSTANTS.Messages.ActuatorStopped);\r\n\t\t\tstNode.socket.removeAllListeners(amngr.CONSTANTS.Messages.ActuatorOptions);\r\n\t\t\tstNode.socket.removeAllListeners(amngr.CONSTANTS.Messages.ActuatorOptionsUpdated);\r\n\t\t\tstNode.socket.removeAllListeners(amngr.CONSTANTS.Messages.ActuatorsList);\r\n\r\n\t\t});\r\n\t\r\n\t\t\r\n\t\t// Map Message ActuatorStarted\r\n\t\tstNode.socket.on( amngr.CONSTANTS.Messages.ActuatorStarted, function(msg) {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Emit event ActuatorStarted\r\n\t\t\tamngr.eventEmitter.emit( amngr.CONSTANTS.Events.ActuatorStarted );\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map Message ActuatorStopped\r\n\t\tstNode.socket.on( amngr.CONSTANTS.Messages.ActuatorStopped, function(msg) {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Emit event ActuatorStopped\r\n\t\t\tamngr.eventEmitter.emit( amngr.CONSTANTS.Events.ActuatorStopped );\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map Message ActuatorOptions\r\n\t\tstNode.socket.on( amngr.CONSTANTS.Messages.ActuatorOptions, function(msg) {\r\n\t\t\t\r\n\t\t\tamngr._msg_ActuatorOptions(msg, stNode, \r\n\t\t\t\t{ \"actuatorID\":  msg.actuatorID,\r\n\t\t\t\t\t\"options\": msg.options\r\n\t\t\t\t});\r\n\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map Message ActuatorOptionsUpdated\r\n\t\tstNode.socket.on( amngr.CONSTANTS.Messages.ActuatorOptionsUpdated, function(msg) {\r\n\t\t\t\r\n\t\t\tamngr._msg_ActuatorOptionsUpdated(msg, stNode, {  \"actuatorID\":  msg.actuatorID\t});\r\n\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map Message ActuatorsList\r\n\t\tstNode.socket.on(amngr.CONSTANTS.Messages.ActuatorsList, function(data){\r\n\t\t\t  \r\n\t\t\tamngr._msg_ActuatorsList(data, stNode, {\"data\" : data});\r\n\t\t\t  \r\n\t\t  });\r\n\t\t\r\n\t\t\r\n\t\tif ( stNode.config.numActuators > 0 ) {\r\n\t\t\t\r\n\t\t\t// Emit message getActuatorsList\r\n\t\t\tstNode.socket.emit( amngr.CONSTANTS.Messages.getActuatorsList ); \r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add Actuator\r\n\t */\r\n\taddActuator(config) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n\t\tlet stActuator = new Actuator( config );\r\n\t\t\r\n\t\tlet controlSocket = stActuator.config._controlSocket;\r\n\t\t\r\n\t\t// Event ActuatorStarted\r\n\t\tstActuator.eventEmitter.on(ActuatorsManager_CONSTANTS.Events.ActuatorStarted, function() {\r\n\t\t\t\r\n\t\t\tconsole.log('<*> ST ActuatorsManager.ActuatorStarted');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(' <~~~> ' + stActuator.config.id );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Event ActuatorStopped\r\n\t\tstActuator.eventEmitter.on(ActuatorsManager_CONSTANTS.Events.ActuatorStopped, function() {\r\n\r\n\t\t\tconsole.log('<*> ST ActuatorsManager.ActuatorStopped');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(' <~~~> ' + stActuator.config.id );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t});\r\n\t\t\t\r\n\t\t\r\n\t\tstActuator.initialize();\r\n\t\tamngr.actuatorsList.push( stActuator );\r\n\t\t\r\n\t\t// Emit message getActuatorOptions\r\n\t\tcontrolSocket.emit(amngr.CONSTANTS.Messages.getActuatorOptions, {\"actuatorID\": stActuator.config.actuatorID});\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns Actuator searched by ID\r\n\t */\r\n\tgetActuatorBy_sysID(actuatorID) {\r\n\r\n\t\tlet amngr = this;\r\n\t\tlet actuator = null;\r\n\t\tlet _i = 0;\r\n\t\t\r\n\t\t_i = amngr.actuatorsList.map(function(x) {return x.config._sysID; }).indexOf(actuatorID);\r\n\t\tif (_i !== -1) {\r\n\t\t\tactuator = amngr.actuatorsList[_i];\r\n\t\t}\r\n\t\t\r\n//\t\tfor (_i = 0; _i < amngr.actuatorsList.length; _i++) {\r\n//\t\t\tif (amngr.actuatorsList[_i].config._sysID === actuatorID) {\r\n//\t\t\t\tactuator = amngr.actuatorsList[_i];\r\n//\t\t\t\tbreak;\r\n//\t\t\t}\r\n//\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"stActuator\": actuator,\r\n\t\t\t\"position\": _i\r\n\t\t};\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns Actuators searched by Node.ID\r\n\t */\r\n\tgetActuatorsByNode(nodeID) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n\t\t\r\n\t\tvar actuators = amngr.actuatorsList.filter(function(actuator, _i, _actuators) {\r\n\t\t\t\r\n\t\t\tif (actuator.config._refSTNodeID === nodeID) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"numActuators\": actuators.length,\r\n\t\t\t\"actuators\": actuators\r\n\t\t};\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Turn off actuators of node\r\n\t */\r\n\tturnOffActuatorsOfNode(nodeID) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n//\t\tlet _nodeID = nodeID;\r\n\t\t\r\n\t\tconsole.log('<*> ST ActuatorsManager.turnOffActuatorsOfNode');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(nodeID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet actuatorsSearch = amngr.getActuatorsByNode(nodeID);\r\n\t\t\r\n\t\tif (actuatorsSearch.actuators !== null) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <~> Emit message');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\t// Emit message TurnOffActuators\r\n\t\t\tactuatorsSearch.actuators[0].config._controlSocket.emit(amngr.CONSTANTS.Messages.TurnOffActuators);\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tconsole.log(' <~> Node not found!!!');\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Get options of actuator\r\n\t */\r\n\tgetOptionsOfActuator(act) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n\t\tlet controlSocket = act.config._controlSocket;\r\n\t\t\r\n\t\tconsole.log('<*> ST ActuatorsManager.getOptionsOfActuator');\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\t// Emit message getActuatorOptions\r\n\t\tcontrolSocket.emit(amngr.CONSTANTS.Messages.getActuatorOptions, \r\n\t\t\t\t{\"actuatorID\" : act.config.actuatorID});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Set options of actuator\r\n\t */\r\n\tsetOptionsOfActuator(act, options) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n\t\tlet controlSocket = act.config._controlSocket;\r\n\r\n\t\tconsole.log('<*> ST ActuatorsManager.setOptionsOfActuator');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\tcontrolSocket.emit(amngr.CONSTANTS.Messages.setActuatorOptions, \r\n\t\t\t\t{\"actuatorID\" : act.config.actuatorID, \"options\" : options});\t// Emit message setSensorOptions\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message ActuatorsList\r\n\t */\r\n\t_msg_ActuatorsList(msg, stNode, options) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n\t\tlet controlSocket = stNode.socket;\r\n\t\tlet data = options.data;\r\n\t\t\r\n\t\t  if (data.numActuators > 0 ) {\r\n\t\t\t  \r\n\t\t\t  data.actuators.forEach(function(act, _i) {\r\n\t\t\t\t  \r\n\t\t\t\t  act._sysID = stNode.config.nodeID + '.' + act.actuatorID;\r\n\t\t\t\t  act._refSTNode = stNode;\r\n\t\t\t\t  act._refSTNodeID = stNode.config.nodeID;\r\n\t\t\t\t  act._stNodeEvents = stNode.eventEmitter;\r\n\t\t\t\t  act._controlSocket = controlSocket;\r\n\t\r\n\t\t\t\t  amngr.addActuator( act );\r\n\t\t\t\t  \r\n\t\t\t  });\r\n\t\t\t  \r\n\t\t  }\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message ActuatorOptions\r\n\t */\r\n\t_msg_ActuatorOptions(msg, stNode, options) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n\t\tlet controlSocket = stNode.socket;\r\n\r\n\t\tconsole.log('<*> ST ActuatorsManager._msg_ActuatorOptions');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\tlet actuatorID = options.actuatorID;\r\n\t\tlet actuatorOptions = options.options;\r\n\t\t\r\n\t\tlet actuator_sysID = stNode.config.nodeID + '.' + actuatorID;\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\t\"actuatorID\": actuatorID\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID(actuator_sysID);\r\n\t\t\tif (actuatorSearch.stActuator === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet act = actuatorSearch.stActuator;\r\n\t\t\t\r\n\t\t\tact.options = actuatorOptions;\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\t\t\t\r\n\t\t  console.log('<EEE> NodesNetManager._msg_ActuatorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message ActuatorOptionsUpdated\r\n\t */\r\n\t_msg_ActuatorOptionsUpdated(msg, stNode, options) {\r\n\t\t\r\n\t\tlet amngr = this;\r\n\t\t\r\n\t\tlet actuatorID = options.actuatorID;\r\n\t\tlet controlSocket = stNode.socket;\r\n\t\t\r\n\t\tlet actuator_sysID = stNode.config.nodeID + '.' + actuatorID;\r\n\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\t\"actuatorID\": actuatorID\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tconsole.log('<*> ST ActuatorsManager.ActuatorOptionsUpdated');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(msg);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID(actuator_sysID);\r\n\t\t\tif (actuatorSearch.stActuator === null) {\r\n\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet act = actuatorSearch.stActuator;\r\n\t\t\t\r\n\t\t\tamngr.getOptionsOfActuator(act);\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\t\t\t\r\n\t\t  console.log('<EEE> ActuatorsManager._msg_ActuatorOptionsUpdated ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nmodule.exports = ActuatorsManager;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}