{"version":3,"sources":["serverEngine/NodesControlService.js"],"names":[],"mappings":"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","file":"serverEngine/NodesControlService.js","sourcesContent":["\"use strict\";\n\n/*\n Nodes Control service\n \n - Provides Nodes control service\n - Start/Stop service\n - Manage message [getSTNetworkInfo]->[STNetworkInfo]\n \n */\n\nlet EventEmitter = require('events').EventEmitter;\nlet portscanner = require('portscanner');\n\n\nlet DataChannel = require('../stNetwork/DataChannel.js').DataChannel;\n\n\n\n/**\n * NodesControlService CONSTANTS\n */\nconst NodesControlService_CONSTANTS = {\n\t\"Events\" : {\n\t\t\"ConfigError\": \"Config Error\",\n\t\t\n\t\t\"ServerListening\": \"Server listening\",\n\t\t\"ServerClosed\": \"Server closed\",\n\t\t\"NodeConnected\": \"Node Connected\",\n\t\t\"NodeDisconnected\": \"Node Disconnected\"\n\n\t},\n\t\n\t\"States\" : {\n\t\t\"Config\" : \"Config\",\n\t\t\"Running\" : \"Running\",\n\t\t\"Error\" : \"Error\"\n\t},\n\t\n\t\"Messages\" : {\n\t\t\"getSTNetworkInfo\" : \"Get STNetwork Info\",\n\t\t\"STNetworkInfo\" : \"STNetwork Info\"\n\n\t}\n};\n\n\n/*\n * NodesControlService\n * \n * Is the service for send and receive data control with Nodes\n * \n */\nclass NodesControlService {\n\t\n\tconstructor(config) {\n\t\t\n\t\tthis.config = config;\n\t\tthis.server = null;\n\t\tthis.serverSocket = null;\n\t\tthis.eventEmitter = new EventEmitter();\n\t\t\n\t\tthis.CONSTANTS = NodesControlService_CONSTANTS;\n\t\t\n\t\tthis.state = NodesControlService_CONSTANTS.States.Config;\n\t}\n\t\n\t\n\t/**\n\t * Start service\n\t * \n\t * @throws Exceptions\n\t */\n\tstartService() {\n\t\t\n\t\tif (this.server != null) {\n\t\t\t throw \"Server is running\";\n\t\t}\n\t\t\n\t\tlet ncs = this;\n\n\t\tncs.server = require('socket.io')();\n\t\t\n\t\tncs.server.on('connection', function(socket){\n\t\t\t\n\t\t\t  ncs.eventEmitter.emit( ncs.CONSTANTS.Events.NodeConnected , {\"socket\" : socket} );\n\t\t\t  \n\t\t\t  socket.on('disconnect', function(){\n\t\t\t\t  ncs.eventEmitter.emit( ncs.CONSTANTS.Events.NodeDisconnected , {\"socket\" : socket} );\n\n\t\t\t  });\n\t\t\t  \n\t\t\t  ncs.mapControlMessages(socket);\n\t\t\t  \n\t\t\t});\n\n\t\t\n//\t\tDataChannel.portInUse( ncs.config.nodes.controlPort, function(_portInUse) {\n//\t\t\tif (_portInUse) {\n//\t\t\t\tncs.eventEmitter.emit( ncs.CONSTANTS.Events.ConfigError );\n//\t\t\t} else {\n//\t\t\t\tncs.server.listen( ncs.config.nodes.controlPort );\n//\t\t\t\tncs.eventEmitter.emit( ncs.CONSTANTS.Events.ServerListening );\n//\t\t\t}\n//\t\t});\n\n\t\t\n\t\t// Checks the status of a single port\n\t\tportscanner.checkPortStatus(ncs.config.nodes.controlPort, '127.0.0.1', function(error, status) {\n\t\t  // Status is 'open' if currently in use or 'closed' if available\n\t\t  console.log(status)\n\t\t  \n\t\t  switch (status) {\n\t\t\tcase 'closed':\n\t\t\t\tncs.server.listen( ncs.config.nodes.controlPort );\n\t\t\t\tncs.state = ncs.CONSTANTS.States.Running;\n\t\t\t\tncs.eventEmitter.emit( ncs.CONSTANTS.Events.ServerListening );\n\t\t\t\tbreak;\n\t\n\t\t\tdefault:\n\t\t\t\tncs.state = ncs.CONSTANTS.States.Error;\n\t\t\t\tncs.eventEmitter.emit( ncs.CONSTANTS.Events.ConfigError );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\t\n//\t\ttry {\n//\t\t\tncs.server.listen( ncs.config.nodes.controlPort );\n//\t\t\tncs.eventEmitter.emit( ncs.CONSTANTS.Events.ServerListening );\n//\t\t\t\n//\t\t} catch (e) {\n//\t\t\t// TODO: handle exception\n//\t\t\tncs.eventEmitter.emit( ncs.CONSTANTS.Events.ConfigError );\n//\n//\t\t}\n\t\t\n\t}\n\t\n\t\n\t/**\n\t * Map control messages\n\t */\n\tmapControlMessages(socket){\n\t\tvar ncs = this;\n\t\t\n\t\t  // · · · · · ·  ¨¨¨  · · · · · ·  ¨¨¨  · · · · · ·  ¨¨¨  · · · · · · |\\/|···  \n\t\t  // Message getSTNetworkInfo\n\t\t  socket.on( ncs.CONSTANTS.Messages.getSTNetworkInfo, function(msg){\n\t\t\t  \n\t\t\t  var dataMSG = {\n\t\t\t\t\"serverType\" : \"STServer\",\n\t\t\t\t\"version\" : process.env.npm_package_version,\n\t\t\t\t\"controlPort\" : ncs.config.nodes.controlPort\n\t\t\t  };\n\t\t\t  \n\t\t\t  socket.emit(ncs.CONSTANTS.Messages.STNetworkInfo, dataMSG);\n\n\t\t  });\n\t\t  // · · · · · ·  ¨¨¨  · · · · · ·  ¨¨¨  · · · · · ·  ¨¨¨  · · · · · · |/\\|···  \n\t}\n\t\n\t\n\t/**\n\t * Stop service\n\t * \n\t * @throws Exceptions\n\t */\n\tstopService() {\n\t\t\n\t\tlet ncs = this;\n\t\n\t\tif (ncs.server == null) {\n\t\t\t throw \"Server not running\";\n\t\t}\n\t\t\n\t\t\n\t\tif (ncs.state == ncs.CONSTANTS.States.Running) {\n\t\t\tncs.server.close();\n\t\t}\n\t\t\n\t\tncs.eventEmitter.emit( ncs.CONSTANTS.Events.ServerClosed );\n\t\tncs.server = null;\n\t}\n}\n\n\nmodule.exports = NodesControlService;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}