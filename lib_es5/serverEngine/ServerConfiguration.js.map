{"version":3,"sources":["serverEngine/ServerConfiguration.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAgBA,IAAM,gCAAgC;AACrC,eAAe;AADsB,CAAtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4CM,mB;;;;;;AAKL,gCAAc;AAAA;;AACb,OAAK,MAAL,GAAc,IAAd;AACA,OAAK,SAAL,GAAiB,6BAAjB;AACA;;;;;;;;;;;;;2BASQ,O,EAAS;;AAEjB,OAAI,YAAY,SAAhB,EAA2B;AAC1B,cAAU,EAAV;AACA;;AAED,OAAI,cAAc,8BAA8B,UAAhD;AACA,OAAI,QAAQ,UAAR,KAAuB,SAA3B,EAAsC;AACrC,kBAAc,QAAQ,UAAtB;AACA;;AAGD,OAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA,OAAI;AACH,QAAI,MAAM,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,WAAhB,EAA6B,MAA7B,CAAX,CAAV;AACA,SAAK,MAAL,GAAc,GAAd;AACA,IAHD,CAGE,OAAO,CAAP,EAAU;;AAEX,YAAQ,GAAR,CAAY,oCAAZ,E;AACA,YAAQ,GAAR,CAAY,EAAE,OAAd,E;AAEA;;AAED,WAAQ,GAAR,CAAY,iCAAZ,E;AAEG;;;;;;AAGL,OAAO,OAAP,GAAiB,mBAAjB","file":"serverEngine/ServerConfiguration.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Server configuration\r\n\r\n - Provides server configuration.\r\n - Load configuration from file\r\n\r\n*/\r\n\r\n\r\n\r\n/**\r\n * ServerConfiguration CONSTANTS\r\n * @memberof st.serverEngine\r\n */\r\nconst ServerConfiguration_CONSTANTS = {\r\n\t\"configFile\" : \"conf/serverconfig.json\"\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * The ServerConfiguration JSON file.\r\n * \r\n * @typedef {Object} ServerConfig_JSON\r\n * @memberof st.serverEngine.ServerConfiguration\r\n * @type Object\r\n * \r\n * @property {string} type='Config' - Type on JSON\r\n * @property {string} typeExtra='Server' - Type extra on JSON\r\n * \r\n * \r\n * @property {object} nodes - Nodes configuration\r\n * @property {string} nodes.netLocation - Net location for nodes control service... \r\n * <pre>\r\n * \"0.0.0.0\" for all interfaces...\r\n * </pre>\r\n * @property {number} nodes.controlPort - Control port\r\n * \r\n * \r\n * @property {object} server - Server configuration\r\n * @property {string} server.netLocation - Net location for server control service\r\n * @property {number} server.controlPort - Control port\r\n * \r\n * \r\n */\r\n\r\n\r\n\r\n/**\r\n * ServerConfiguration\r\n * \r\n * @class \r\n * @memberof st.serverEngine\r\n * \r\n * @property {object} config - Configuration obejct\r\n * \r\n */\r\nclass ServerConfiguration {\r\n\t\r\n\t/**\r\n\t * @constructs ServerConfiguration\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.config = null;\r\n\t\tthis.CONSTANTS = ServerConfiguration_CONSTANTS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Read configuration from file\r\n\t * \r\n\t * @param {object} options - Options object\r\n\t * @param {string} [options.configFile] - configuration file path\r\n\t * \r\n\t */\r\n\treadFile(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _configFile = ServerConfiguration_CONSTANTS.configFile;\r\n\t\tif (options.configFile !== undefined) {\r\n\t\t\t_configFile = options.configFile;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tvar fs = require('fs');\r\n\t\t\r\n\t\ttry {\r\n\t\t\tvar obj = JSON.parse(fs.readFileSync(_configFile, 'utf8'));\r\n\t\t\tthis.config = obj;\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('ServerConfiguration.readFile Error');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(e.message);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('ServerConfiguration.readFile OK');\t// TODO REMOVE DEBUG LOG\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = ServerConfiguration;\r\n\r\n\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}