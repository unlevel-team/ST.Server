{"version":3,"sources":["serverEngine/SensorsManager.js"],"names":[],"mappings":"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","file":"serverEngine/SensorsManager.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Sensors manager\r\n\r\n - Manages sensors\r\n - Adds sensors from node\r\n - Get sensor by id\r\n - Get sensors by node\r\n - Start/Stop sensor\r\n - Turn off sensors of node\r\n\r\n*/\r\n\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n/**\r\n * SensorsManager CONSTANTS\r\n */\r\nconst SensorsManager_CONSTANTS = {\r\n\t\t\"Config\" : {\r\n\t\t\t\"type_Vsensor\" : \"vsensor\",\r\n\t\t\t\"type_Cylonjs\" : \"cylonjs\"\r\n\r\n\t\t},\r\n\r\n\t\t\"States\" : {\r\n\t\t\t\"State_Config\" : \"config\",\r\n\t\t\t\"State_Ready\" : \"ready\",\r\n\t\t\t\"State_Working\" : \"working\",\r\n\t\t\t\"State_Stop\" : \"stop\"\r\n\t\t},\r\n\r\n\t\t\"Events\" : {\r\n\t\t\t\"SensorRemoved\" : \"Sensor Removed\",\r\n\r\n\t\t\t\"StartSensor\" : \"StartSensor\",\r\n\t\t\t\"SensorStarted\" : \"SensorStarted\",\r\n\t\t\t\"StopSensor\" : \"StopSensor\",\r\n\t\t\t\"SensorStopped\" : \"SensorStopped\",\r\n\r\n\t\t\t\"SetSensorOPsonNode\" : \"Set SNS OPs on Node\"\r\n\r\n\t\t},\r\n\r\n\t\t\"Messages\" : {\r\n\t\t\t\"getSensorsList\" : \"Get Sensors List\",\r\n\t\t\t\"SensorsList\" : \"Sensors List\",\r\n\t\t\t\"getSensorInfo\" : \"Get Sensor Info\",\r\n\t\t\t\"SensorInfo\" : \"Sensor Info\",\r\n\t\t\t\"getSensorOptions\" : \"Get Sensor Options\",\r\n\t\t\t\"setSensorOptions\" : \"Set Sensor Options\",\r\n\t\t\t\"SensorOptions\" : \"Sensor Options\",\r\n\t\t\t\"SensorOptionsUpdated\" : \"Sensor Options Updated\",\r\n\r\n\r\n\t\t\t\"StartSensor\" : \"StartSensor\",\r\n\t\t\t\"SensorStarted\" : \"SensorStarted\",\r\n\t\t\t\"StopSensor\" : \"StopSensor\",\r\n\t\t\t\"SensorStopped\" : \"SensorStopped\",\r\n\r\n\t\t\t\"TurnOffSensors\" : \"TurnOffSensors\"\r\n\t\t}\r\n\t};\r\n\r\n\r\n/**\r\n * Sensor\r\n */\r\nclass Sensor {\r\n\r\n\tconstructor(config) {\r\n\t\tthis.config = config;\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\r\n\t\tthis.CONSTANTS = SensorsManager_CONSTANTS;\r\n\t\tthis.state = SensorsManager_CONSTANTS.States.State_Config;\r\n\r\n\t\tthis.options = null;\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\r\n\t\tthis.mapControlMessages();\r\n\t\tthis.state = SensorsManager_CONSTANTS.States.State_Ready;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Map control messages\r\n\t */\r\n\tmapControlMessages() {\r\n\r\n\t\tlet stSensor = this;\r\n\r\n\t\tif (stSensor.state !== stSensor.CONSTANTS.States.State_Config) {\r\n\t\t\tthrow \"Bad state.\";\r\n\t\t}\r\n\r\n\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Start sensor\r\n\t */\r\n\tstart() {\r\n\r\n\t\tlet stSensor = this;\r\n\r\n\t\treturn new Promise(function(resolve, reject) {\r\n\r\n\t\t\tlet request = {\r\n\t\t\t\t\"sensorID\" : stSensor.config.sensorID,\r\n\t\t\t\t\"result\" : null\r\n\r\n\t\t\t};\r\n\r\n\t\t\t// Emit message StartSensor\r\n\t\t\tstSensor.config._controlSocket.emit(SensorsManager_CONSTANTS.Messages.StartSensor , request);\r\n\r\n\t\t\tresolve(request);\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Stop sensor\r\n\t */\r\n\tstop() {\r\n\r\n\t\tlet stSensor = this;\r\n\r\n\t\treturn new Promise(function(resolve, reject) {\r\n\r\n\t\t\tlet request = {\r\n\t\t\t\t\"sensorID\" : stSensor.config.sensorID,\r\n\t\t\t\t\"result\" : null\r\n\r\n\t\t\t};\r\n\r\n\t\t\t// Emit message StopSensor\r\n\t\t\tstSensor.config._controlSocket.emit(SensorsManager_CONSTANTS.Messages.StopSensor , request);\r\n\t\t\tresolve(request);\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Sensors Manager\r\n */\r\nclass SensorsManager {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.sensorList = [];\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\r\n\t\tthis.CONSTANTS = SensorsManager_CONSTANTS;\r\n\r\n\r\n\t\tthis.nodeCtrlSrv = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Add Sensors from Node\r\n\t */\r\n\taddSensorsFromNode(stNode) {\r\n\r\n\t\tlet smngr = this;\r\n\t\tlet _stNode = stNode;\r\n\r\n\t\t// ~ ~ ~ ~ ~ ~  # #  ~ ~ ~ ~ ~ ~  ###  ~ ~ ~ ~ ~ ~  # # ~ ~ ~ ~ ~ ~ |\\/|~~~\r\n\t\t// Event NodeDisconnected\r\n\t\tstNode.eventEmitter.on( stNode.CONSTANTS.Events.NodeDisconnected, function(data) {\n\r\n\t\t\tlet stSensors = smngr.getSensorsByNode( data.node.config.nodeID );\r\n\r\n\t\t\tstSensors.sensors.forEach(function(sensor, _i, _sensors) {\n\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID( sensor.config._sysID );\r\n\t\t\t\tif ( sensorSearch.stSensor !== null ) {\r\n\t\t\t\t\tsmngr.sensorList.splice(sensorSearch.position, 1);\r\n\t\t\t\t}\r\n\n\t\t\t});\r\n\n\t\t});\r\n\t\t// ~ ~ ~ ~ ~ ~  # #  ~ ~ ~ ~ ~ ~  ###  ~ ~ ~ ~ ~ ~  # # ~ ~ ~ ~ ~ ~ |/\\|~~~\r\n\r\n\r\n\t\t// Map event disconnect\r\n\t\tstNode.socket.on(\"disconnect\", function() {\r\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorStarted);\r\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorStopped);\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorsList);\r\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorOptions);\r\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorOptionsUpdated);\r\n\n\t\t});\r\n\r\n\r\n\t\t// Map message SensorStarted\r\n\t\tstNode.socket.on( smngr.CONSTANTS.Messages.SensorStarted, function(msg) {\r\n\t\t\t\r\n\t\t\tlet stSensors = smngr.getSensorBy_sysID(stNode.config.nodeID + msg.sensorID);\r\n\t\t\tif (stSensors.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet stSensor = stSensors.stSensor;\r\n\t\t\t\r\n\t\t\t// Emit event SensorStarted\r\n\t\t\tstSensor.eventEmitter.emit( SensorsManager_CONSTANTS.Events.SensorStarted );\r\n\t\t\t\r\n\t\t});\r\n\r\n\r\n\t\t// Map message SensorStopped\r\n\t\tstNode.socket.on( smngr.CONSTANTS.Messages.SensorStopped, function(msg) {\r\n\t\t\t\r\n\t\t\tlet stSensors = smngr.getSensorBy_sysID(stNode.config.nodeID + msg.sensorID);\r\n\t\t\tif (stSensors.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet stSensor = stSensors.stSensor;\r\n\t\t\t\r\n\t\t\t// Emit event SensorStopped\r\n\t\t\tstSensor.eventEmitter.emit( SensorsManager_CONSTANTS.Events.SensorStopped );\r\n\r\n\t\t});\r\n\r\n\t\t\r\n\t\t// Map Message SensorsList\r\n\t\tstNode.socket.on(smngr.CONSTANTS.Messages.SensorsList, function(msg){\r\n\r\n\t\t\tsmngr._msg_SensorsList(msg, stNode, {\"data\" : msg});\r\n\r\n\t\t});\r\n\r\n\r\n\t\t// Map message SensorOptions\r\n\t\tstNode.socket.on(smngr.CONSTANTS.Messages.SensorOptions, function(msg) {\r\n\r\n\t\t\tsmngr._msg_SensorOptions(msg, stNode, {\r\n\t\t\t\t\"sensorID\" : msg.sensorID,\r\n\t\t\t\t\"options\" : msg.options\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\r\n\t\t// Map message SensorOptions\r\n\t\tstNode.socket.on(smngr.CONSTANTS.Messages.SensorOptionsUpdated, function(msg) {\r\n\r\n\t\t\tsmngr._msg_SensorOptionsUpdated(msg, stNode, {\r\n\t\t\t\t\"sensorID\" : msg.sensorID\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\r\n\t\tif ( stNode.config.numSensors > 0 ) {\r\n\r\n\t\t\t// Emit message getSensorsList\r\n\t\t\tstNode.socket.emit( smngr.CONSTANTS.Messages.getSensorsList );\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Add Sensor\r\n\t */\r\n\taddSensor(config) {\r\n\r\n\t\tlet smngr = this;\r\n\r\n\r\n\t\tlet stSensor = new Sensor( config );\r\n\r\n\t\tlet controlSocket = stSensor.config._controlSocket;\r\n\r\n\t  // Event SensorStarted\r\n\t\tstSensor.eventEmitter.on(SensorsManager_CONSTANTS.Events.SensorStarted, function() {\r\n\r\n\t\t\tconsole.log('<*> ST SensorsManager.SensorStarted');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(' <~~~> ' + stSensor.config.id );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t});\r\n\t  // ~ ~ ~ ~ ~ ~  # #  ~ ~ ~ ~ ~ ~  ###  ~ ~ ~ ~ ~ ~  # # ~ ~ ~ ~ ~ ~ |/\\|~~~\r\n\r\n\r\n\t  // ~ ~ ~ ~ ~ ~  # #  ~ ~ ~ ~ ~ ~  ###  ~ ~ ~ ~ ~ ~  # # ~ ~ ~ ~ ~ ~ |\\/|~~~\r\n\t  // Event SensorStopped\r\n\t\tstSensor.eventEmitter.on(SensorsManager_CONSTANTS.Events.SensorStopped, function() {\r\n\r\n\t\t\tconsole.log('<*> ST SensorsManager.SensorStopped');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(' <~~~> ' + stSensor.config.id );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t});\r\n\t  // ~ ~ ~ ~ ~ ~  # #  ~ ~ ~ ~ ~ ~  ###  ~ ~ ~ ~ ~ ~  # # ~ ~ ~ ~ ~ ~ |/\\|~~~\r\n\r\n\t\tstSensor.initialize();\r\n\t\tsmngr.sensorList.push( stSensor );\r\n\r\n\t\t// Emit message getSensorOptions\r\n\t\tcontrolSocket.emit(smngr.CONSTANTS.Messages.getSensorOptions, {\"sensorID\": stSensor.config.sensorID});\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns Sensor searched by ID\r\n\t */\r\n\tgetSensorBy_sysID(sensorID) {\r\n\r\n\t\tlet smngr = this;\r\n\r\n\t\tlet sensor = null;\r\n\t\tlet _i = 0;\r\n\r\n\r\n\t\t_i = smngr.sensorList.map(function(x) {return x.config._sysID; }).indexOf(sensorID);\r\n\t\tif (_i !== -1) {\r\n\t\t\tsensor = smngr.sensorList[_i];\r\n\t\t}\r\n\r\n\t\t// for (_i = 0; _i < smngr.sensorList.length; _i++) {\r\n\t\t// \tif (smngr.sensorList[_i].config._sysID == sensorID) {\r\n\t\t// \t\tsensor = smngr.sensorList[_i];\r\n\t\t// \t\tbreak;\r\n\t\t// \t}\r\n\t\t// }\r\n\r\n\t\treturn {\r\n\t\t\t\"stSensor\": sensor,\r\n\t\t\t\"position\": _i\r\n\t\t};\r\n\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns Sensors searched by Node.ID\r\n\t */\r\n\tgetSensorsByNode(nodeID) {\r\n\r\n\t\tlet smngr = this;\r\n\r\n\t\tlet sensors = smngr.sensorList.filter(function(sensor, _i, _sensors) {\r\n\r\n\t\t\tif (sensor.config._refSTNodeID === nodeID) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\t\"numSensors\": sensors.length,\r\n\t\t\t\"sensors\": sensors\r\n\t\t};\r\n\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Turn off sensors of node\r\n\t */\r\n\tturnOffSensorsOfNode(nodeID) {\r\n\r\n\t\tlet smngr = this;\r\n//\t\tlet _nodeID = nodeID;\r\n\r\n\t\tconsole.log('<*> ST SensorsManager.turnOffSensorsOfNode');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(nodeID);\t// TODO REMOVE DEBUG LOG\r\n\n\t\tlet sensorsSearch = smngr.getSensorsByNode(nodeID);\r\n\r\n\t\tif (sensorsSearch.sensors !== null) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <~> Emit message');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\t// Emit message TurnOffSensors\r\n\t\t\tsensorsSearch.sensors[0].config._controlSocket.emit(smngr.CONSTANTS.Messages.TurnOffSensors);\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tconsole.log(' <~> Node not found!!!');\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get options of sensor\r\n\t */\r\n\tgetOptionsOfSensor(sns) {\r\n\r\n\t\tlet smngr = this;\r\n\t\tlet controlSocket = sns.config._controlSocket;\r\n\r\n\t\tconsole.log('<*> ST SensorsManager.getOptionsOfSensor');\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t// Emit message getSensorOptions\r\n\t\tcontrolSocket.emit(smngr.CONSTANTS.Messages.getSensorOptions,\r\n\t\t\t\t{\"sensorID\" : sns.config.sensorID});\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Set options of sensor\r\n\t */\r\n\tsetOptionsOfSensor(sns, options) {\r\n\r\n\t\tlet smngr = this;\r\n\t\tlet controlSocket = sns.config._controlSocket;\r\n\r\n\t\tconsole.log('<*> ST SensorsManager.setOptionsOfSensor');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t// Emit message setSensorOptions\r\n\t\tcontrolSocket.emit(smngr.CONSTANTS.Messages.setSensorOptions,\r\n\t\t\t\t{\"sensorID\" : sns.config.sensorID, \"options\" : options});\r\n\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Message SensorList\r\n\t */\r\n\t_msg_SensorsList(msg, stNode, options) {\r\n\r\n\t\tlet smngr = this;\r\n\t\tlet controlSocket = stNode.socket;\r\n\t\tlet data = options.data;\r\n\r\n\t\t  if (data.numSensors > 0 ) {\r\n\r\n\t\t\t  data.sensors.forEach(function(snsDATA, _i) {\r\n\r\n\t\t\t\t  snsDATA._sysID = stNode.config.nodeID + '.' + snsDATA.sensorID;\r\n\t\t\t\t  snsDATA._refSTNodeID = stNode.config.nodeID;\r\n\r\n\t\t\t\t  snsDATA._stNodeEvents = stNode.eventEmitter;\r\n\t\t\t\t  snsDATA._controlSocket = controlSocket;\r\n\r\n\t\t\t\t  smngr.addSensor( snsDATA );\r\n\r\n\t\t\t  });\r\n\t\t  }\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Message SensorOptions\r\n\t */\r\n\t_msg_SensorOptions(msg, stNode, options) {\r\n\r\n\t\tlet smngr = this;\r\n\r\n\t\tlet sensorID = options.sensorID;\r\n\t\tlet sensorOptions = options.options;\r\n\r\n\t\tlet sensor_sysID = stNode.config.nodeID + '.' + sensorID;\r\n\r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\r\n\t\tconsole.log('<*> ST SensorsManager._msg_SensorOptions');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(msg);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\r\n\t\t\tsns.options = sensorOptions;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> SensorsManager._msg_SensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Message SensorOptionsUpdated\r\n\t */\r\n\t_msg_SensorOptionsUpdated(msg, stNode, options) {\r\n\r\n\t\tlet smngr = this;\r\n\r\n\t\tlet sensorID = options.sensorID;\r\n\t\tlet controlSocket = stNode.socket;\r\n\r\n\t\tlet sensor_sysID = stNode.config.nodeID + '.' + sensorID;\r\n\r\n\r\n\t\tlet response = {\r\n\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\r\n\r\n\t\tconsole.log('<*> ST SensorsManager.SensorOptionsUpdated');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\r\n\t\t\tsmngr.getOptionsOfSensor(sns);\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> SensorsManager._msg_SensorOptionsUpdated ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nmodule.exports = SensorsManager;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}