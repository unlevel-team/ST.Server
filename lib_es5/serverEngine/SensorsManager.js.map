{"version":3,"sources":["serverEngine/SensorsManager.js"],"names":[],"mappings":"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","file":"serverEngine/SensorsManager.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Sensors manager\r\n\r\n - Manages sensors\r\n - Adds sensors from node\r\n - Get sensor by id\r\n - Get sensors by node\r\n - Start/Stop sensor\r\n - Turn off sensors of node\r\n\r\n*/\r\n\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n/**\r\n * SensorsManager CONSTANTS\r\n */\r\nconst SensorsManager_CONSTANTS = {\r\n\t\t\"Config\" : {\r\n\t\t\t\"type_Vsensor\" : \"vsensor\",\r\n\t\t\t\"type_Cylonjs\" : \"cylonjs\"\r\n\r\n\t\t},\r\n\t\t\r\n\t\t\"States\" : {\r\n\t\t\t\"State_Config\" : \"config\",\r\n\t\t\t\"State_Ready\" : \"ready\",\r\n\t\t\t\"State_Working\" : \"working\",\r\n\t\t\t\"State_Stop\" : \"stop\"\r\n\t\t},\r\n\t\t\r\n\t\t\"Events\" : {\r\n\t\t\t\"SensorRemoved\" : \"Sensor Removed\",\r\n\t\t\t\r\n\t\t\t\"StartSensor\" : \"StartSensor\",\r\n\t\t\t\"SensorStarted\" : \"SensorStarted\",\r\n\t\t\t\"StopSensor\" : \"StopSensor\",\r\n\t\t\t\"SensorStopped\" : \"SensorStopped\",\r\n\t\t\t\r\n\t\t\t\"SetSensorOPsonNode\" : \"Set SNS OPs on Node\"\r\n\r\n\t\t},\r\n\t\t\r\n\t\t\"Messages\" : {\r\n\t\t\t\"getSensorsList\" : \"Get Sensors List\",\r\n\t\t\t\"SensorsList\" : \"Sensors List\",\r\n\t\t\t\"getSensorInfo\" : \"Get Sensor Info\",\r\n\t\t\t\"SensorInfo\" : \"Sensor Info\",\r\n\t\t\t\"getSensorOptions\" : \"Get Sensor Options\",\r\n\t\t\t\"setSensorOptions\" : \"Set Sensor Options\",\r\n\t\t\t\"SensorOptions\" : \"Sensor Options\",\r\n\t\t\t\"SensorOptionsUpdated\" : \"Sensor Options Updated\",\r\n\r\n\t\t\t\r\n\t\t\t\"StartSensor\" : \"StartSensor\",\r\n\t\t\t\"SensorStarted\" : \"SensorStarted\",\r\n\t\t\t\"StopSensor\" : \"StopSensor\",\r\n\t\t\t\"SensorStopped\" : \"SensorStopped\",\r\n\t\t\t\r\n\t\t\t\"TurnOffSensors\" : \"TurnOffSensors\"\r\n\t\t}\r\n\t};\r\n\r\n\r\n/**\r\n * Sensor\r\n */\r\nclass Sensor {\r\n\t\r\n\tconstructor(config) {\r\n\t\tthis.config = config;\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = SensorsManager_CONSTANTS;\r\n\t\tthis.state = SensorsManager_CONSTANTS.States.State_Config;\r\n\t\t\r\n\t\tthis.options = null;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tthis.mapControlMessages();\r\n\t\tthis.state = SensorsManager_CONSTANTS.States.State_Ready;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t */\r\n\tmapControlMessages() {\r\n\t\t\r\n\t\tlet stSensor = this;\r\n\t\t\r\n\t\tif (stSensor.state != stSensor.CONSTANTS.States.State_Config) {\r\n\t\t\tthrow \"Bad state.\";\r\n\t\t}\r\n\t\t\r\n\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start sensor\r\n\t */\r\n\tstart() {\r\n\t\t\r\n\t\tlet stSensor = this;\r\n\t\t\r\n\t\treturn new Promise(function(resolve, reject) {\r\n\t\t\t\r\n\t\t\tlet request = {\r\n\t\t\t\t\"sensorID\" : stSensor.config.sensorID,\r\n\t\t\t\t\"result\" : null\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tstSensor.config._controlSocket.emit(SensorsManager_CONSTANTS.Messages.StartSensor , request);\r\n\t\t\t\r\n\t\t\tresolve(request);\r\n\t\t\t\r\n\t\t});\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop sensor\r\n\t */\r\n\tstop() {\r\n\t\t\r\n\t\tlet stSensor = this;\r\n\t\t\r\n\t\treturn new Promise(function(resolve, reject) {\r\n\t\t\t\r\n\t\t\tlet request = {\r\n\t\t\t\t\"sensorID\" : stSensor.config.sensorID,\r\n\t\t\t\t\"result\" : null\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tstSensor.config._controlSocket.emit(SensorsManager_CONSTANTS.Messages.StopSensor , request);\r\n\t\t\tresolve(request);\r\n\t\t});\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * Sensors Manager\r\n */\r\nclass SensorsManager {\r\n\t\r\n\tconstructor() {\r\n\t\t\r\n\t\tthis.sensorList = [];\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = SensorsManager_CONSTANTS;\r\n\r\n\t\t\r\n\t\tthis.nodeCtrlSrv = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Add Sensors from Node\r\n\t */\r\n\taddSensorsFromNode(stNode) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n\t\tlet _stNode = stNode;\r\n\t\t\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |\\/|···  \r\n\t  // Event NodeDisconnected\r\n\t\tstNode.eventEmitter.on( stNode.CONSTANTS.Events.NodeDisconnected, function(data) {\n\r\n\t\t\tlet stSensors = smngr.getSensorsByNode( data.node.config.nodeID );\r\n\t\t\t\r\n\t\t\tstSensors.sensors.forEach(function(sensor, _i, _sensors) {\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID( sensor.config._sysID );\r\n\t\t\t\tif ( sensorSearch.stSensor != null ) {\r\n\t\t\t\t\tsmngr.sensorList.splice(sensorSearch.position, 1);\r\n\t\t\t\t}\r\n\t\t\t\t\n\t\t\t});\r\n\t\t\t\n\t\t})\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |/\\|···  \r\n\t\t\r\n\t\t\r\n\t\t// Map event disconnect\r\n\t\tstNode.socket.on(\"disconnect\", function() {\r\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorStarted);\r\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorStopped);\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorsList);\r\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorOptions);\r\n\t\t\tstNode.socket.removeAllListeners(smngr.CONSTANTS.Messages.SensorOptionsUpdated);\r\n\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map message SensorStarted\r\n\t\tstNode.socket.on( smngr.CONSTANTS.Messages.SensorStarted, function(msg) {\r\n\t\t\tstSensor.eventEmitter.emit( SensorsManager_CONSTANTS.Events.SensorStarted );\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map message SensorStopped\r\n\t\tstNode.socket.on( smngr.CONSTANTS.Messages.SensorStopped, function(msg) {\r\n\t\t\tstSensor.eventEmitter.emit( SensorsManager_CONSTANTS.Events.SensorStopped );\r\n\r\n\t\t});\r\n\t\t\r\n\t\t// Map Message SensorsList\r\n\t\tstNode.socket.on(smngr.CONSTANTS.Messages.SensorsList, function(msg){\r\n\t\t\t\r\n\t\t\tsmngr._msg_SensorsList(msg, stNode, {\"data\" : msg});\r\n\t\t\t  \r\n\t\t  });\r\n\t\t\r\n\t\t\r\n\t\t// Map message SensorOptions\r\n\t\tstNode.socket.on(smngr.CONSTANTS.Messages.SensorOptions, function(msg) {\r\n\r\n\t\t\tsmngr._msg_SensorOptions(msg, stNode, {\r\n\t\t\t\t\"sensorID\" : msg.sensorID,\r\n\t\t\t\t\"options\" : msg.options\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\r\n\t\t\r\n\t\t// Map message SensorOptions\r\n\t\tstNode.socket.on(smngr.CONSTANTS.Messages.SensorOptionsUpdated, function(msg) {\r\n\r\n\t\t\tsmngr._msg_SensorOptionsUpdated(msg, stNode, {\r\n\t\t\t\t\"sensorID\" : msg.sensorID\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tif ( stNode.config.numSensors > 0 ) {\r\n\t\t\tstNode.socket.emit( smngr.CONSTANTS.Messages.getSensorsList ); \r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add Sensor\r\n\t */\r\n\taddSensor(config) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n\t\t\r\n\t\t\r\n\t\tlet stSensor = new Sensor( config );\r\n\t\t\r\n\t\tlet controlSocket = stSensor.config._controlSocket;\r\n\t\t\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |\\/|···  \r\n\t  // Event SensorStarted\r\n\t\tstSensor.eventEmitter.on(SensorsManager_CONSTANTS.Events.SensorStarted, function() {\r\n\t\t\t\r\n\t\t\tconsole.log('<···> ST SensorsManager.SensorStarted');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(' <···> ' + stSensor.config.id );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t});\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |/\\|···  \r\n\t\t\r\n\t\t\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |\\/|···  \r\n\t  // Event SensorStopped\r\n\t\tstSensor.eventEmitter.on(SensorsManager_CONSTANTS.Events.SensorStopped, function() {\r\n\r\n\t\t\tconsole.log('<···> ST SensorsManager.SensorStopped');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(' <···> ' + stSensor.config.id );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t});\r\n\t  // · · · · · ·  # #  · · · · · ·  ###  · · · · · ·  # # · · · · · · |/\\|···  \r\n\t\t\r\n\t\tstSensor.initialize();\r\n\t\tsmngr.sensorList.push( stSensor );\r\n\t\t\r\n\t\tcontrolSocket.emit(smngr.CONSTANTS.Messages.getSensorOptions, {\"sensorID\": stSensor.config.sensorID});\t// Emit message getSensorOptions\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns Sensor searched by ID\r\n\t */\r\n\tgetSensorBy_sysID(sensorID) {\r\n\r\n\t\tlet smngr = this;\r\n\t\t\r\n\t\tlet sensor = null;\r\n\t\tlet _i = 0;\r\n\t\t\r\n\t\tfor (_i = 0; _i < smngr.sensorList.length; _i++) {\r\n\t\t\tif (smngr.sensorList[_i].config._sysID == sensorID) {\r\n\t\t\t\tsensor = smngr.sensorList[_i];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"stSensor\": sensor,\r\n\t\t\t\"position\": _i\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Returns Sensors searched by Node.ID\r\n\t */\r\n\tgetSensorsByNode(nodeID) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n\t\t\r\n\t\tlet sensors = smngr.sensorList.filter(function(sensor, _i, _sensors) {\r\n\t\t\t\r\n\t\t\tif (sensor.config._refSTNodeID == nodeID) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\n\t\t});\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"numSensors\": sensors.length,\r\n\t\t\t\"sensors\": sensors\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Turn off sensors of node\r\n\t */\r\n\tturnOffSensorsOfNode(nodeID) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n//\t\tlet _nodeID = nodeID;\r\n\t\t\r\n\t\tconsole.log('<*> ST SensorsManager.turnOffSensorsOfNode');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(nodeID);\t// TODO REMOVE DEBUG LOG\r\n\n\t\tlet sensorsSearch = smngr.getSensorsByNode(nodeID);\r\n\t\t\r\n\t\tif (sensorsSearch.sensors != null) {\r\n\t\t\tconsole.log(' <·> Emit message');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tsensorsSearch.sensors[0].config._controlSocket.emit(smngr.CONSTANTS.Messages.TurnOffSensors);\r\n\t\t} else {\r\n\t\t\tconsole.log(' <·> Node not found!!!');\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get options of sensor\r\n\t */\r\n\tgetOptionsOfSensor(sns) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n\t\tlet controlSocket = sns.config._controlSocket;\r\n\t\t\r\n\t\tconsole.log('<*> ST SensorsManager.getOptionsOfSensor');\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\tcontrolSocket.emit(smngr.CONSTANTS.Messages.getSensorOptions, \r\n\t\t\t\t{\"sensorID\" : sns.config.sensorID});\t// Emit message getSensorOptions\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Set options of sensor\r\n\t */\r\n\tsetOptionsOfSensor(sns, options) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n\t\tlet controlSocket = sns.config._controlSocket;\r\n\r\n\t\tconsole.log('<*> ST SensorsManager.setOptionsOfSensor');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\tcontrolSocket.emit(smngr.CONSTANTS.Messages.setSensorOptions, \r\n\t\t\t\t{\"sensorID\" : sns.config.sensorID, \"options\" : options});\t// Emit message setSensorOptions\r\n\t\t\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorList\r\n\t */\r\n\t_msg_SensorsList(msg, stNode, options) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n\t\tlet controlSocket = stNode.socket;\r\n\t\tlet data = options.data;\r\n\t\t  \r\n\t\t  if (data.numSensors > 0 ) {\r\n\t\t\t  \r\n\t\t\t  data.sensors.forEach(function(snsDATA, _i) {\r\n\t\t\t\t  \r\n\t\t\t\t  snsDATA._sysID = stNode.config.nodeID + '.' + snsDATA.sensorID;\r\n\t\t\t\t  snsDATA._refSTNodeID = stNode.config.nodeID;\r\n\t\t\t\t  \r\n\t\t\t\t  snsDATA._stNodeEvents = stNode.eventEmitter;\r\n\t\t\t\t  snsDATA._controlSocket = controlSocket;\r\n\r\n\t\t\t\t  smngr.addSensor( snsDATA );\r\n\t\t\t\t  \r\n\t\t\t  });\r\n\t\t  }\r\n\t  \r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorOptions\r\n\t */\r\n\t_msg_SensorOptions(msg, stNode, options) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n\t\t\r\n\t\tlet sensorID = options.sensorID;\r\n\t\tlet sensorOptions = options.options;\r\n\t\t\r\n\t\tlet sensor_sysID = stNode.config.nodeID + '.' + sensorID;\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\": sensorID\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('<*> ST SensorsManager._msg_SensorOptions');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(msg);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor == null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\t\t\t\r\n\t\t\tsns.options = sensorOptions;\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\t\t\t\r\n\t\t  console.log('<EEE> SensorsManager._msg_SensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorOptionsUpdated\r\n\t */\r\n\t_msg_SensorOptionsUpdated(msg, stNode, options) {\r\n\t\t\r\n\t\tlet smngr = this;\r\n\t\t\r\n\t\tlet sensorID = options.sensorID;\r\n\t\tlet controlSocket = stNode.socket;\r\n\t\t\r\n\t\tlet sensor_sysID = stNode.config.nodeID + '.' + sensorID;\r\n\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\": sensorID\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tconsole.log('<*> ST SensorsManager.SensorOptionsUpdated');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor == null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\t\t\t\r\n\t\t\tsmngr.getOptionsOfSensor(sns);\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\t\t\t\r\n\t\t  console.log('<EEE> SensorsManager._msg_SensorOptionsUpdated ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nmodule.exports = SensorsManager;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STServer\\es6"}